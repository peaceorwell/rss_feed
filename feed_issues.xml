<?xml version='1.0' encoding='UTF-8'?>
<rss version="2.0">
  <channel>
    <title>GitHub issues Feed</title>
    <link>https://github.com/username/repo/issues</link>
    <description>Recent issues from GitHub repo</description>
    <item>
      <title>[CPPInductor] Fix another out-of-bounds access</title>
      <link>https://github.com/pytorch/pytorch/pull/122580</link>
      <description><![CDATA[<p>Not sure what was the idea behind <code>{self.tiling_factor}*sizeof(float)/sizeof({DTYPE_TO_CPP[dtype]})</code> size calculation (perhaps copy-n-paste error during the refactor made by https://github.com/pytorch/pytorch/pull/97626  ) , but <code>Vectorized::store(ptr, tiling_factor)</code> needs at least <code>tiling_factor</code> elements, not <code>tiling_factor/2</code> (which would be the case with the original calculation if data type is 64-bit value such as int64)<br />
Discovered while trying to enable arch64 vectorized inductor. <br />
Minimal reproducer (reproducible on ARMv8 or any  x86_64 machine that does not support AVX512):<br />
```python<br />
import torch<br />
def do_ds(x, y):<br />
    return torch.diagonal_scatter(x, y)</p>
<p>x=torch.ones(10, 10, dtype=torch.int64)<br />
y=torch.tensor([ 1,  2, -8,  8,  5,  5, -7, -8,  7,  0])<br />
dsc = torch.compile(do_ds)<br />
assert torch.allclose(torch.diagonal_scatter(x, y), dsc(x, y))<br />
```</p>]]></description>
      <pubDate>Sun, 24 Mar 2024 10:42:13 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/pull/122580</guid>
    </item>
    <item>
      <title>Recompiles and cache_size_limit from detectron2 CycleBatchNormList</title>
      <link>https://github.com/pytorch/pytorch/issues/122578</link>
      <description><![CDATA[<p>Running<br />
<code>./benchmarks/dynamo/torchbench.py --inference --performance --only detectron2_fcos_r_50_fpn --stats --dynamic-shapes</code><br />
I am seeing<br />
<code>py
WARNING:torch._dynamo.convert_frame:torch._dynamo hit config.cache_size_limit (8)
   function: 'forward' (/home/jansel/conda/envs/pytorch/lib/python3.11/site-packages/detectron2/layers/batch_norm.py:318)
   last reason: L['self']._pos == 0</code></p>
<p>The root cause is this class (slightly minified by hand):<br />
```py<br />
class CycleBatchNormList(nn.ModuleList):<br />
    def <strong>init</strong>(self, length: int, bn_class=nn.BatchNorm2d, <strong>kwargs):<br />
        super().<strong>init</strong>([bn_class(</strong>kwargs, affine=False) for k in range(length)])<br />
        self._pos = 0</p>
<pre><code>def forward(self, x):
    ret = self[self._pos](x)
    self._pos = (self._pos + 1) % len(self)
    return ret
</code></pre>
<p>```</p>
<p>TorchDynamo is correctly detecting the mutation of <code>self._pos</code> and mapping the class to <code>UnspecializedNNModuleVariable</code>, however the <code>self[self._pos]</code> is causing issues because it results in different weights being used each iteration.</p>
<p>This is a particularly tricky case to handle, since it is hard to prove that all values of <code>self._pos</code> will result in the same graph.  We also do not support indirect guards, so it is not possible to have a guard on <code>self[self._pos].blah</code>.</p>
<p>As a concrete action item, I think we should detect this type of pattern and graph break on it.  This would be a lot better than recompiling and hitting the cache limit, since it would allow us to optimize other parts of the model.</p>
<p>cc @voznesenskym @penguinwu @EikanWang @jgong5 @Guobing-Chen @XiaobingSuper @zhuhaozhe @blzheng @wenzhe-nrv @jiayisunx @chenyang78 @kadeng @chauhang</p>]]></description>
      <pubDate>Sun, 24 Mar 2024 08:45:27 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/issues/122578</guid>
    </item>
    <item>
      <title>[inductor] Fix bug with freezing + split_cat passes</title>
      <link>https://github.com/pytorch/pytorch/pull/122544</link>
      <description><![CDATA[<p>Stack from <a href="https://github.com/ezyang/ghstack">ghstack</a> (oldest at bottom):<br />
* <strong>-&gt;</strong> #122544</p>
<p>Fixes #122380</p>
<p>cc @voznesenskym @penguinwu @EikanWang @jgong5 @Guobing-Chen @XiaobingSuper @zhuhaozhe @blzheng @wenzhe-nrv @jiayisunx @peterbell10 @ipiszy @yf225 @chenyang78 @kadeng @muchulee8 @aakhundov @ColinPeppler @amjames @desertfire @chauhang</p>]]></description>
      <pubDate>Fri, 22 Mar 2024 20:01:47 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/pull/122544</guid>
    </item>
    <item>
      <title>[torch.compile] `conv_add` optimization will omit the `alpha` argument</title>
      <link>https://github.com/pytorch/pytorch/issues/122382</link>
      <description><![CDATA[<h3>üêõ Describe the bug</h3>
<p>The <code>conv_add</code> optimization overlooks the <code>alpha</code> parameter. In the model provided, the <code>torch.compile</code> method assumes <code>alpha=1</code> by default, whereas the actual value of <code>alpha</code> is 0.85. This discrepancy leads to a variation in the output compared to a straightforward execution.</p>
<p>```py<br />
import torch</p>
<p>torch.manual_seed(420)</p>
<p>class Model(torch.nn.Module):</p>
<pre><code>def __init__(self):
    super().__init__()
    self.conv = torch.nn.Conv2d(3, 2, 1, stride=1, padding=1)
    self.other_tensor = torch.randn(2, 1, 1)

def forward(self, x1):
    v1 = self.conv(x1)
    v2 = torch.add(v1, self.other_tensor, alpha=0.875)
    return v2
</code></pre>
<p>func = Model().to('cpu')</p>
<p>x = torch.randn(1, 3, 2, 2)</p>
<p>with torch.no_grad():<br />
    print(func(x.clone()))</p>
<pre><code>func1 = torch.compile(func)
print(func1(x.clone()))

print(torch.allclose(func.other_tensor, func1.other_tensor)) # True
</code></pre>
<p>"""<br />
tensor([[[[ 1.7728,  1.7728,  1.7728,  1.7728],<br />
          [ 1.7728,  2.1860,  1.7604,  1.7728],<br />
          [ 1.7728,  0.9550,  2.3261,  1.7728],<br />
          [ 1.7728,  1.7728,  1.7728,  1.7728]],</p>
<pre><code>     [[ 0.2579,  0.2579,  0.2579,  0.2579],
      [ 0.2579, -0.5048,  0.6618,  0.2579],
      [ 0.2579,  0.9659,  0.0888,  0.2579],
      [ 0.2579,  0.2579,  0.2579,  0.2579]]]])
</code></pre>
<p>tensor([[[[ 1.9624,  1.9624,  1.9624,  1.9624],<br />
          [ 1.9624,  2.3757,  1.9500,  1.9624],<br />
          [ 1.9624,  1.1447,  2.5158,  1.9624],<br />
          [ 1.9624,  1.9624,  1.9624,  1.9624]],</p>
<pre><code>     [[ 0.2639,  0.2639,  0.2639,  0.2639],
      [ 0.2639, -0.4989,  0.6677,  0.2639],
      [ 0.2639,  0.9718,  0.0947,  0.2639],
      [ 0.2639,  0.2639,  0.2639,  0.2639]]]])
</code></pre>
<p>"""<br />
```</p>
<h3>Versions</h3>
<p>```<br />
Collecting environment information...<br />
PyTorch version: 2.3.0.dev20240301+cu121<br />
Is debug build: False<br />
CUDA used to build PyTorch: 12.1<br />
ROCM used to build PyTorch: N/A</p>
<p>OS: Ubuntu 22.04.1 LTS (x86_64)<br />
GCC version: (Ubuntu 12.3.0-1ubuntu1~22.04) 12.3.0<br />
Clang version: 11.0.0 (https://github.com/aflgo/aflgo.git fa125da5d70621daf7141c6279877c97708c8c1f)<br />
CMake version: version 3.22.1<br />
Libc version: glibc-2.35</p>
<p>Python version: 3.9.0 (default, Nov 15 2020, 14:28:56)  [GCC 7.3.0] (64-bit runtime)<br />
Python platform: Linux-6.5.0-26-generic-x86_64-with-glibc2.35<br />
Is CUDA available: True<br />
CUDA runtime version: Could not collect<br />
CUDA_MODULE_LOADING set to: LAZY<br />
GPU models and configuration: GPU 0: NVIDIA GeForce RTX 3060<br />
Nvidia driver version: 525.147.05<br />
cuDNN version: Could not collect<br />
HIP runtime version: N/A<br />
MIOpen runtime version: N/A<br />
Is XNNPACK available: True</p>
<p>CPU:<br />
Architecture:                       x86_64<br />
CPU op-mode(s):                     32-bit, 64-bit<br />
Address sizes:                      46 bits physical, 48 bits virtual<br />
Byte Order:                         Little Endian<br />
CPU(s):                             24<br />
On-line CPU(s) list:                0-23<br />
Vendor ID:                          GenuineIntel<br />
Model name:                         12th Gen Intel(R) Core(TM) i9-12900K<br />
CPU family:                         6<br />
Model:                              151<br />
Thread(s) per core:                 2<br />
Core(s) per socket:                 16<br />
Socket(s):                          1<br />
Stepping:                           2<br />
CPU max MHz:                        5200.0000<br />
CPU min MHz:                        800.0000<br />
BogoMIPS:                           6374.40<br />
Flags:                              fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf tsc_known_freq pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault cat_l2 cdp_l2 ssbd ibrs ibpb stibp ibrs_enhanced tpr_shadow flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid rdt_a rdseed adx smap clflushopt clwb intel_pt sha_ni xsaveopt xsavec xgetbv1 xsaves split_lock_detect avx_vnni dtherm ida arat pln pts hwp hwp_notify hwp_act_window hwp_epp hwp_pkg_req hfi vnmi umip pku ospke waitpkg gfni vaes vpclmulqdq tme rdpid movdiri movdir64b fsrm md_clear serialize pconfig arch_lbr ibt flush_l1d arch_capabilities<br />
Virtualization:                     VT-x<br />
L1d cache:                          640 KiB (16 instances)<br />
L1i cache:                          768 KiB (16 instances)<br />
L2 cache:                           14 MiB (10 instances)<br />
L3 cache:                           30 MiB (1 instance)<br />
NUMA node(s):                       1<br />
NUMA node0 CPU(s):                  0-23<br />
Vulnerability Gather data sampling: Not affected<br />
Vulnerability Itlb multihit:        Not affected<br />
Vulnerability L1tf:                 Not affected<br />
Vulnerability Mds:                  Not affected<br />
Vulnerability Meltdown:             Not affected<br />
Vulnerability Mmio stale data:      Not affected<br />
Vulnerability Retbleed:             Not affected<br />
Vulnerability Spec rstack overflow: Not affected<br />
Vulnerability Spec store bypass:    Mitigation; Speculative Store Bypass disabled via prctl<br />
Vulnerability Spectre v1:           Mitigation; usercopy/swapgs barriers and __user pointer sanitization<br />
Vulnerability Spectre v2:           Mitigation; Enhanced / Automatic IBRS, IBPB conditional, RSB filling, PBRSB-eIBRS SW sequence<br />
Vulnerability Srbds:                Not affected<br />
Vulnerability Tsx async abort:      Not affected</p>
<p>Versions of relevant libraries:<br />
[pip3] numpy==1.26.4<br />
[pip3] pytorch-triton==3.0.0+901819d2b6<br />
[pip3] torch==2.3.0.dev20240301+cu121<br />
[pip3] torchaudio==2.2.0.dev20240301+cu118<br />
[pip3] torchvision==0.18.0.dev20240301+cu118<br />
[pip3] triton==2.2.0<br />
[conda] numpy                     1.26.4                   pypi_0    pypi<br />
[conda] pytorch-triton            3.0.0+901819d2b6          pypi_0    pypi<br />
[conda] torch                     2.3.0.dev20240301+cu121          pypi_0    pypi<br />
[conda] torchaudio                2.2.0.dev20240301+cu118          pypi_0    pypi<br />
[conda] torchvision               0.18.0.dev20240301+cu118          pypi_0    pypi<br />
[conda] triton                    2.2.0                    pypi_0    pypi<br />
```</p>
<p>cc @ezyang @gchanan @zou3519 @kadeng @msaroufim @bdhirsh @anijain2305 @chauhang</p>]]></description>
      <pubDate>Wed, 20 Mar 2024 20:22:33 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/issues/122382</guid>
    </item>
    <item>
      <title>[inductor][cpp] unified the vectorized conversion with `at::vec::convert` for all data types</title>
      <link>https://github.com/pytorch/pytorch/pull/119979</link>
      <description><![CDATA[<p>Stack from <a href="https://github.com/ezyang/ghstack">ghstack</a> (oldest at bottom):<br />
* <strong>-&gt;</strong> #119979<br />
* #119734<br />
* #119655<br />
* #119654</p>
<p>This PR unified the vectorized conversion with <code>at::vec::convert</code> for all vectorized data types. The intrinsics implementations are implemented as a specialization and moved to their own arch-specific files. The vectorized conversion logic in cpp Inductor is simplified.</p>
<p>cc @mingfeima @XiaobingSuper @sanchitintel @ashokei @jingxu10 @voznesenskym @penguinwu @EikanWang @Guobing-Chen @zhuhaozhe @blzheng @wenzhe-nrv @jiayisunx @peterbell10 @ipiszy @yf225 @chenyang78 @kadeng @muchulee8 @aakhundov @ColinPeppler</p>]]></description>
      <pubDate>Wed, 14 Feb 2024 21:46:22 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/pull/119979</guid>
    </item>
    <item>
      <title>Investigate Strictness of torch.compile `is_big_gpu`</title>
      <link>https://github.com/pytorch/pytorch/issues/109489</link>
      <description><![CDATA[<h3>üêõ Describe the bug</h3>
<p>The check was introduced in https://github.com/pytorch/pytorch/pull/90738 to fix: https://github.com/pytorch/torchdynamo/issues/2015</p>
<p>However, this causes Triton matmul template codegen not to occur on smaller GPUs (sms &lt; 80), including most people's commercial GPUs.</p>
<p>We make two observations:<br />
1. This check was a hotfix that is too strict for most cases<br />
2. V100 is on the testing path of Triton, so it is likely that this issue is fixed</p>
<p>Hence, my proposal is to get rid of the check entirely, as long as CI passes.</p>
<p>CC @jansel as prev discussed (and original code author)</p>
<h3>Error logs</h3>
<p><code>[WARNING] not enough SMs to use max_autotune_gemm mode</code></p>
<h3>Minified repro</h3>
<p>Use torch.compile on small GPU</p>
<h3>Versions</h3>
<details>

PyTorch version: 2.2.0a0+gitc29c493
Is debug build: False
CUDA used to build PyTorch: 12.2
ROCM used to build PyTorch: N/A

OS: Ubuntu 22.04.3 LTS (x86_64)
GCC version: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
Clang version: Could not collect
CMake version: version 3.27.2
Libc version: glibc-2.35

Python version: 3.10.12 (main, Jun 11 2023, 05:26:28) [GCC 11.4.0] (64-bit runtime)
Python platform: Linux-6.2.0-32-generic-x86_64-with-glibc2.35
Is CUDA available: False
CUDA runtime version: 12.2.128
CUDA_MODULE_LOADING set to: N/A
GPU models and configuration: GPU 0: NVIDIA GeForce RTX 4070 Laptop GPU
Nvidia driver version: 535.86.10
cuDNN version: Probably one of the following:
/usr/lib/x86_64-linux-gnu/libcudnn.so.8.9.4
/usr/lib/x86_64-linux-gnu/libcudnn_adv_infer.so.8.9.4
/usr/lib/x86_64-linux-gnu/libcudnn_adv_train.so.8.9.4
/usr/lib/x86_64-linux-gnu/libcudnn_cnn_infer.so.8.9.4
/usr/lib/x86_64-linux-gnu/libcudnn_cnn_train.so.8.9.4
/usr/lib/x86_64-linux-gnu/libcudnn_ops_infer.so.8.9.4
/usr/lib/x86_64-linux-gnu/libcudnn_ops_train.so.8.9.4
HIP runtime version: N/A
MIOpen runtime version: N/A
Is XNNPACK available: True

CPU:
Architecture:                       x86_64
CPU op-mode(s):                     32-bit, 64-bit
Address sizes:                      46 bits physical, 48 bits virtual
Byte Order:                         Little Endian
CPU(s):                             20
On-line CPU(s) list:                0-19
Vendor ID:                          GenuineIntel
Model name:                         13th Gen Intel(R) Core(TM) i9-13900H
CPU family:                         6
Model:                              186
Thread(s) per core:                 2
Core(s) per socket:                 14
Socket(s):                          1
Stepping:                           2
CPU max MHz:                        5400.0000
CPU min MHz:                        400.0000
BogoMIPS:                           5990.40
Flags:                              fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf tsc_known_freq pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb ssbd ibrs ibpb stibp ibrs_enhanced tpr_shadow vnmi flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid rdseed adx smap clflushopt clwb intel_pt sha_ni xsaveopt xsavec xgetbv1 xsaves avx_vnni dtherm ida arat pln pts hwp hwp_notify hwp_act_window hwp_epp hwp_pkg_req hfi umip pku ospke waitpkg gfni vaes vpclmulqdq tme rdpid movdiri movdir64b fsrm md_clear serialize pconfig arch_lbr ibt flush_l1d arch_capabilities
Virtualization:                     VT-x
L1d cache:                          544 KiB (14 instances)
L1i cache:                          704 KiB (14 instances)
L2 cache:                           11.5 MiB (8 instances)
L3 cache:                           24 MiB (1 instance)
NUMA node(s):                       1
NUMA node0 CPU(s):                  0-19
Vulnerability Gather data sampling: Not affected
Vulnerability Itlb multihit:        Not affected
Vulnerability L1tf:                 Not affected
Vulnerability Mds:                  Not affected
Vulnerability Meltdown:             Not affected
Vulnerability Mmio stale data:      Not affected
Vulnerability Retbleed:             Not affected
Vulnerability Spec store bypass:    Mitigation; Speculative Store Bypass disabled via prctl
Vulnerability Spectre v1:           Mitigation; usercopy/swapgs barriers and __user pointer sanitization
Vulnerability Spectre v2:           Mitigation; Enhanced IBRS, IBPB conditional, RSB filling, PBRSB-eIBRS SW sequence
Vulnerability Srbds:                Not affected
Vulnerability Tsx async abort:      Not affected

Versions of relevant libraries:
[pip3] flake8==6.0.0
[pip3] flake8-bugbear==23.3.23
[pip3] flake8-comprehensions==3.12.0
[pip3] flake8-executable==2.1.3
[pip3] flake8-logging-format==0.9.0
[pip3] flake8-pyi==23.3.1
[pip3] flake8-simplify==0.19.3
[pip3] jax-triton==0.1.4
[pip3] mypy==1.4.1
[pip3] mypy-extensions==1.0.0
[pip3] numpy==1.24.3
[pip3] pytorch-triton==2.1.0+6e4932cda8
[pip3] torch==2.2.0a0+git84680cb
[pip3] torchaudio==2.0.2
[pip3] torchvision==0.15.2
[pip3] triton==2.1.0
[conda] Could not collect

</details>
<p>cc @ezyang @msaroufim @wconstab @bdhirsh @anijain2305 @zou3519 @voznesenskym @penguinwu @EikanWang @jgong5 @Guobing-Chen @XiaobingSuper @zhuhaozhe @blzheng @wenzhe-nrv @jiayisunx @peterbell10 @ipiszy @yf225 @chenyang78 @kadeng @muchulee8 @aakhundov @ColinPeppler @Xia-Weiwen @ngimel</p>]]></description>
      <pubDate>Mon, 18 Sep 2023 02:44:49 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/issues/109489</guid>
    </item>
  </channel>
</rss>
