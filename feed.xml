<?xml version='1.0' encoding='UTF-8'?>
<rss version="2.0">
  <channel>
    <title>GitHub Commits Feed</title>
    <link>https://github.com/username/repo/commits</link>
    <description>Recent commits from GitHub repo</description>
    <item>
      <title>[AOTI] Make abi_compatible as default for OSS CI (#119126)</title>
      <link>https://github.com/pytorch/pytorch/commit/b41f3e8df1b6ac2240d591f5e53b36589e90299b</link>
      <description><![CDATA[<p>[AOTI] Make abi_compatible as default for OSS CI (#119126)</p>
<p>Summary: Introduce an environment varible AOT_INDUCTOR_ABI_COMPATIBLE to control the ABI-compatible mode, and turn it on for OSS CI.</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/119126<br />
Approved by: https://github.com/chenyang78<br />
ghstack dependencies: #119125</p>]]></description>
      <pubDate>Sun, 04 Feb 2024 07:48:58 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/b41f3e8df1b6ac2240d591f5e53b36589e90299b</guid>
    </item>
    <item>
      <title>[AOTI] Support copy_, _fft_c2c and view_as_real in C shim (#119125)</title>
      <link>https://github.com/pytorch/pytorch/commit/79b20aec764c62e7a086aa2e2515b21731c9a831</link>
      <description><![CDATA[<p>[AOTI] Support copy_, _fft_c2c and view_as_real in C shim (#119125)</p>
<p>Summary: These ops exist in GoogleFnet. Also add a Complex fallback for convert_element_type. After this PR, we can enable ABI-compatible for AOTInductor OSS CI.</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/119125<br />
Approved by: https://github.com/chenyang78</p>]]></description>
      <pubDate>Sun, 04 Feb 2024 07:48:58 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/79b20aec764c62e7a086aa2e2515b21731c9a831</guid>
    </item>
    <item>
      <title>[auto_functionalize] Remove mutated_args_name from args (#119050)</title>
      <link>https://github.com/pytorch/pytorch/commit/440b7d52793be046354c03521295ab7f2d3969f2</link>
      <description><![CDATA[<p>[auto_functionalize] Remove mutated_args_name from args (#119050)</p>
<p><code>auto_functionalize</code> currently takes a custom op, a list of mutated argument names, and inputs to the custom op as kwargs. The list of mutated argument names is computed from the schema, and gets created when we're tracing. However, it seems that having the list of mutated argument names is a little unnecessary since we can always recompute it from the schema during runtime.</p>
<p>This also prevents the case where users might incorrectly modify the inputs to this operator, as we will now just recompute it during the runtime. This probably won't affect things too much because inductor will decompose auto_functionalize.</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/119050<br />
Approved by: https://github.com/zou3519</p>]]></description>
      <pubDate>Fri, 02 Feb 2024 16:27:14 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/440b7d52793be046354c03521295ab7f2d3969f2</guid>
    </item>
    <item>
      <title>Expose aggressive_recomputation as an inductor config (#118943)</title>
      <link>https://github.com/pytorch/pytorch/commit/de6a9060932f4541863130d4cb8e90267f22dd56</link>
      <description><![CDATA[<p>Expose aggressive_recomputation as an inductor config (#118943)</p>
<p>Summary:<br />
As title.</p>
<p>We found aggressive_recomputation shows memory savings (7% on APS COFFEE model) with 2% QPS loss.</p>
<p>It also gives very promising signal on our auto ac experiments: https://docs.google.com/document/d/1S2qgMg1CwAQ4U1Ffuk2epbEOx06ogZhioX2jKCwL7ZQ/edit</p>
<p>{F1426175073}</p>
<p>Test Plan:<br />
APS COFFEE from silverlakeli<br />
- Zoom of baseline job: https://www.internalfb.com/intern/zoomer/?profiling_run_fbid=927380488801910&amp;tab=overview<br />
- Zoom of job with aggressive_recomputation: https://www.internalfb.com/intern/zoomer/?profiling_run_fbid=1126815608217470&amp;tab=overview</p>
<p>APS 1100x shrunk version:<br />
- baseline: https://www.internalfb.com/mast/job/aps-yuzhenhuang-afe049505a<br />
- test: https://www.internalfb.com/mast/job/aps-yuzhenhuang-709e41bf0d<br />
Memory from 42.98% -&gt; 41.04%.</p>
<p>Reviewed By: yf225, yuxihu, silverlakeli, richqyz</p>
<p>Differential Revision: D53248057</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118943<br />
Approved by: https://github.com/anijain2305, https://github.com/yanboliang</p>]]></description>
      <pubDate>Fri, 02 Feb 2024 16:17:03 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/de6a9060932f4541863130d4cb8e90267f22dd56</guid>
    </item>
    <item>
      <title>[inductor] make multi-kernel work with cpp-wrapper (#117813)</title>
      <link>https://github.com/pytorch/pytorch/commit/c24ffc3f66b2270dfc65a404687b91b55ed580e9</link>
      <description><![CDATA[<p>[inductor] make multi-kernel work with cpp-wrapper (#117813)</p>
<p>Make multi-kernel work with cpp-wrapper. multi-kernel generates two equivalent variants for a reduction. At runtime the faster one is picked. But cpp-wrapper need save cubin file during codegen. They don't work with each other at the beginning.</p>
<p>Thanks Jason for suggesting a neat way to integrate these two. cpp-wrapper does 2 passes codegen right now. For the first pass, we still generate multi-kernel code and run it; for the second pass, we load the cubin file for the faster kernel directly. And multi-kernel python code is not generated for the second pass since they should not be needed.</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/117813<br />
Approved by: https://github.com/jansel</p>]]></description>
      <pubDate>Fri, 02 Feb 2024 16:06:21 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/c24ffc3f66b2270dfc65a404687b91b55ed580e9</guid>
    </item>
    <item>
      <title>[Inductor] GEMM shape padding improvements (#118522)</title>
      <link>https://github.com/pytorch/pytorch/commit/cc46829f96dba05b9b46bae31a1e6d2a053f667e</link>
      <description><![CDATA[<p>[Inductor] GEMM shape padding improvements (#118522)</p>
<p>Improvements to shape padding logic in torch/_inductor/pad_mm.py</p>
<p>These changes could lead up to 14% perf improvement for certain Meta internal models in experiments.</p>
<p>Most notably:<br />
  * 1.) Use aten.const_pad_nd operation to pad Tensors in a single op instead of using multiple steps involving intermediate buffers. This appears to be more performant than the previous logic, confirmed by Profiling &amp; Benchmarking results ( Meta internal )<br />
 * 2.) Make many paddings unneccessary using explicitly transposed GEMM when either M or N dimension is properly aligned but the other is not, configurable via config.shape_pad_use_transpose (default: True).<br />
  * 3.) Enable shape padding for the Inductor CUDA  /  Cutlass backend for all GEMM ops where Cutlass would be enabled, without benchmarking in that case.<br />
  * Add config flag to always pad shapes (without benchmarking first), configurable via config.force_shape_pad (default: False )<br />
  * Added several new unit tests to ensure tensors are padded such that they meet all alignment requirements after padding.</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118522<br />
Approved by: https://github.com/jansel, https://github.com/eellison</p>]]></description>
      <pubDate>Fri, 02 Feb 2024 00:50:06 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/cc46829f96dba05b9b46bae31a1e6d2a053f667e</guid>
    </item>
    <item>
      <title>[inductor] skip launching kernels with zero grid in AOTInductor when using backed symints (#118654)</title>
      <link>https://github.com/pytorch/pytorch/commit/babd6c776dfdc5db0f0f1bc69e41a5a5d76ca719</link>
      <description><![CDATA[<p>[inductor] skip launching kernels with zero grid in AOTInductor when using backed symints (#118654)</p>
<p>Like #110312 but we also run this check when backed symints are in the grid (e.g. s1 / 512)</p>
<h3>Why?</h3>
<p>Let's say we lower a model and generate GPU kernel grid with symbolic shapes, for e.g. <code>s1 / 512</code>. If at some point later, we ran the lowered model with inputs s.t. <code>s1 = 0</code>, then we'll launch the kernel with a <code>0</code> sized grid. This surfaces as <code>CUDA driver error: invalid argument</code>.</p>
<p>To avoid this, we check for a <code>0</code> sized grid whenever there's symbolic shapes which includes backed and unbacked symints.</p>
<p>This adds non-zero overhead to the CPU. However, in return, we get better reliability when encountering this scenario. This scenario happened when serving an internal model.</p>
<h3>Test</h3>
<p>```<br />
$ python test/inductor/test_aot_inductor.py -k test_zero_grid_with_unbacked_symbols<br />
OK (skipped=3)</p>
<p>$ python test/inductor/test_aot_inductor.py -k test_zero_grid_with_backed_symbols</p>
<h1>Before</h1>
<p>Error: CUDA driver error: invalid argument<br />
FAILED (errors=2, skipped=3)</p>
<h1>Now</h1>
<p>OK (skipped=3)<br />
```</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118654<br />
Approved by: https://github.com/chenyang78, https://github.com/desertfire</p>]]></description>
      <pubDate>Thu, 01 Feb 2024 19:19:52 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/babd6c776dfdc5db0f0f1bc69e41a5a5d76ca719</guid>
    </item>
    <item>
      <title>[inductor] Fix an internal test issue (#118903)</title>
      <link>https://github.com/pytorch/pytorch/commit/946ea47a4fcf7883560743e3b290547dc506056a</link>
      <description><![CDATA[<p>[inductor] Fix an internal test issue (#118903)</p>
<p>Summary: test_add_complex4 that introduced in https://github.com/pytorch/pytorch/pull/117929  fails internally, because of a cpp compilation issue for cpu. Specify the right device in the test instead.</p>
<p>Differential Revision: <a href="https://our.internmc.facebook.com/intern/diff/D53333919">D53333919</a><br />
Pull Request resolved: https://github.com/pytorch/pytorch/pull/118903<br />
Approved by: https://github.com/clee2000</p>]]></description>
      <pubDate>Thu, 01 Feb 2024 19:18:12 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/946ea47a4fcf7883560743e3b290547dc506056a</guid>
    </item>
    <item>
      <title>Revert "[inductor] make multi-kernel work with cpp-wrapper (#117813)"</title>
      <link>https://github.com/pytorch/pytorch/commit/796278b57e95c9a6c2bdcdea413d61b31fb6344a</link>
      <description><![CDATA[<p>Revert "[inductor] make multi-kernel work with cpp-wrapper (#117813)"</p>
<p>This reverts commit 20484a193626ef72e0b3f35914f17deb2a89b8fc.</p>
<p>Reverted https://github.com/pytorch/pytorch/pull/117813 on behalf of https://github.com/atalman due to broke linux-focal-rocm5.7-py3.8 tests (<a href="https://github.com/pytorch/pytorch/pull/117813#issuecomment-1922613135">comment</a>)</p>]]></description>
      <pubDate>Thu, 01 Feb 2024 17:19:19 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/796278b57e95c9a6c2bdcdea413d61b31fb6344a</guid>
    </item>
    <item>
      <title>Workaround for super() calls in test_torchinductor_dynamic_shapes (#118586)</title>
      <link>https://github.com/pytorch/pytorch/commit/08d90a1ea97d17b9fb233a17c605415e13497922</link>
      <description><![CDATA[<p>Workaround for super() calls in test_torchinductor_dynamic_shapes (#118586)</p>
<p>Info about super in dynamic classes:<br />
https://stackoverflow.com/questions/71879642/how-to-pass-function-with-super-when-creating-class-dynamically<br />
https://stackoverflow.com/questions/43782944/super-does-not-work-together-with-type-supertype-obj-obj-must-be-an-i</p>
<p>Calling super(TestCase) actually calls TestCase's parent's functions, bypassing TestCase itself's functions</p>
<p>Mainly doing this because it's making disable bot spam</p>
<p>Test: checked locally and check that https://github.com/pytorch/pytorch/issues/117954 actually got skipped</p>
<p>Logs for <code>inductor/test_torchinductor_dynamic_shapes.py::TestInductorDynamicCUDA::test_unbacked_index_select_cuda</code><br />
https://ossci-raw-job-status.s3.amazonaws.com/log/21083466405<br />
Afaik this PR doesn't actually cause the test to fail, it just surfaces the error since the mem leak check wasn't running previously</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118586<br />
Approved by: https://github.com/huydhn</p>]]></description>
      <pubDate>Thu, 01 Feb 2024 16:40:37 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/08d90a1ea97d17b9fb233a17c605415e13497922</guid>
    </item>
    <item>
      <title>[inductor] more accurate throughput calculations for kernel benchmarks (#118858)</title>
      <link>https://github.com/pytorch/pytorch/commit/61b572ed5638dea4b47c16672eb7e7361e806bfc</link>
      <description><![CDATA[<p>[inductor] more accurate throughput calculations for kernel benchmarks (#118858)</p>
<p>Our current throughput calculations for kernel benchmarks have some issues,<br />
particularly when we slice inputs in the kernel. In such cases, we count<br />
the original inputs as part of the memory traffic passed across the kernel.<br />
This is incorrect because it may result in a much larger throughput<br />
calculation, which can even exceed the theoretical bandwidth.</p>
<p>Instead, we should only count the size of the "slices" that contribute to<br />
the actual memory traffic.</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118858<br />
Approved by: https://github.com/jansel</p>]]></description>
      <pubDate>Thu, 01 Feb 2024 13:42:14 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/61b572ed5638dea4b47c16672eb7e7361e806bfc</guid>
    </item>
    <item>
      <title>[inductor] make multi-kernel work with cpp-wrapper (#117813)</title>
      <link>https://github.com/pytorch/pytorch/commit/20484a193626ef72e0b3f35914f17deb2a89b8fc</link>
      <description><![CDATA[<p>[inductor] make multi-kernel work with cpp-wrapper (#117813)</p>
<p>Make multi-kernel work with cpp-wrapper. multi-kernel generates two equivalent variants for a reduction. At runtime the faster one is picked. But cpp-wrapper need save cubin file during codegen. They don't work with each other at the beginning.</p>
<p>Thanks Jason for suggesting a neat way to integrate these two. cpp-wrapper does 2 passes codegen right now. For the first pass, we still generate multi-kernel code and run it; for the second pass, we load the cubin file for the faster kernel directly. And multi-kernel python code is not generated for the second pass since they should not be needed.</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/117813<br />
Approved by: https://github.com/jansel</p>]]></description>
      <pubDate>Thu, 01 Feb 2024 13:29:02 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/20484a193626ef72e0b3f35914f17deb2a89b8fc</guid>
    </item>
    <item>
      <title>[inductor] Handle special values correctly in ir.Scan codegen (#118788)</title>
      <link>https://github.com/pytorch/pytorch/commit/9c2b43cc5057cb840879224e3bdced58d6334c0a</link>
      <description><![CDATA[<p>[inductor] Handle special values correctly in ir.Scan codegen (#118788)</p>
<p>Special values (<code>NaN</code>/<code>+/-Inf</code>) are not correctly during codegen for <code>ir.Scan</code> nodes. This<br />
is a fairly minor bugfix that has not come up since the only two scan<br />
ops with lowerings use "normal" values.</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118788<br />
Approved by: https://github.com/peterbell10</p>]]></description>
      <pubDate>Thu, 01 Feb 2024 06:54:20 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/9c2b43cc5057cb840879224e3bdced58d6334c0a</guid>
    </item>
    <item>
      <title>[AOTInductor] Add Runtime Constant-folding for AOTInductor (#118765)</title>
      <link>https://github.com/pytorch/pytorch/commit/2b48891e62e5c4b57c8cac92cee5eb71228a203a</link>
      <description><![CDATA[<p>[AOTInductor] Add Runtime Constant-folding for AOTInductor (#118765)</p>
<p>Summary:<br />
Add Runtime Constant-folding for AOTInductor.<br />
This also include the invocation of constant folding at load time.</p>
<p>The constant folding lowering is a 2-step process.<br />
First, we split the graph into 2 modules, one of it is the constant module, which doesn't depend on any input and the whole module could be inferred (constant-folded) one-time and be reused. The constant module, is lowered, and being codegen-ed as usual and cached (let's call this constant code). The constant code reuses the whole lowering/profiling/etc. process, only difference is that we do not generate any headers or initialization for the constant code.<br />
Second, after handling the constant module, we take care of the main module (which is the part that would depend on the user input.) For the main module, we take in one additional component, the constant code, compare with a normal lowering. Addition step we do here is that, we inject the constant code into the codegen-ed main module, and create the caller for the main module to consume the result of the constant module.</p>
<p>Test Plan: Unit tests included in commit.</p>
<p>Differential Revision: D53274382</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118765<br />
Approved by: https://github.com/chenyang78</p>]]></description>
      <pubDate>Wed, 31 Jan 2024 20:54:25 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/2b48891e62e5c4b57c8cac92cee5eb71228a203a</guid>
    </item>
    <item>
      <title>[Inductor] Skip triton templates for mixedmm on SM70- (#118591)</title>
      <link>https://github.com/pytorch/pytorch/commit/6c67f3333a539e8f29515375a87612897214f8f2</link>
      <description><![CDATA[<p>[Inductor] Skip triton templates for mixedmm on SM70- (#118591)</p>
<p>As it results in numerical errors, see https://github.com/pytorch/pytorch/issues/117144</p>
<p>Fixes https://github.com/pytorch/pytorch/issues/117144</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118591<br />
Approved by: https://github.com/jansel</p>]]></description>
      <pubDate>Wed, 31 Jan 2024 15:30:45 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/6c67f3333a539e8f29515375a87612897214f8f2</guid>
    </item>
    <item>
      <title>Revert "Workaround for super() calls in test_torchinductor_dynamic_shapes (#118586)"</title>
      <link>https://github.com/pytorch/pytorch/commit/483001e8468209911292aa7f23c2a25fbfb6e31b</link>
      <description><![CDATA[<p>Revert "Workaround for super() calls in test_torchinductor_dynamic_shapes (#118586)"</p>
<p>This reverts commit f2682e75e6fd735c4a84afe59eafd541f7643f4a.</p>
<p>Reverted https://github.com/pytorch/pytorch/pull/118586 on behalf of https://github.com/atalman due to Broke slow tests (<a href="https://github.com/pytorch/pytorch/pull/118586#issuecomment-1919810802">comment</a>)</p>]]></description>
      <pubDate>Wed, 31 Jan 2024 11:44:29 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/483001e8468209911292aa7f23c2a25fbfb6e31b</guid>
    </item>
    <item>
      <title>[AOTI] Support _embedding_bag in C shim (#118706)</title>
      <link>https://github.com/pytorch/pytorch/commit/1128cf96f078a76f27b038d7adbc2b72fe8927e2</link>
      <description><![CDATA[<p>[AOTI] Support _embedding_bag in C shim (#118706)</p>
<p>Summary: At some point I will stop manually adding ops to C shim, but use torchgen to generate those code. For the near term, I need to add a few more in order to switch the AOTInductor dashboard run.</p>
<p>Differential Revision: <a href="https://our.internmc.facebook.com/intern/diff/D53249074">D53249074</a><br />
Pull Request resolved: https://github.com/pytorch/pytorch/pull/118706<br />
Approved by: https://github.com/frank-wei, https://github.com/aakhundov<br />
ghstack dependencies: #118704, #118705</p>]]></description>
      <pubDate>Wed, 31 Jan 2024 07:02:40 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/1128cf96f078a76f27b038d7adbc2b72fe8927e2</guid>
    </item>
    <item>
      <title>[inductor] Refactor ir.ComplexView (#118704)</title>
      <link>https://github.com/pytorch/pytorch/commit/dd52939438834545632ccc9e986029d63f68e064</link>
      <description><![CDATA[<p>[inductor] Refactor ir.ComplexView (#118704)</p>
<p>Summary: Make ir.ComplexView a subclass of ir.FallbackKernel, to unify the codegen logic</p>
<p>Differential Revision: <a href="https://our.internmc.facebook.com/intern/diff/D53248972">D53248972</a><br />
Pull Request resolved: https://github.com/pytorch/pytorch/pull/118704<br />
Approved by: https://github.com/frank-wei</p>]]></description>
      <pubDate>Wed, 31 Jan 2024 06:42:29 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/dd52939438834545632ccc9e986029d63f68e064</guid>
    </item>
    <item>
      <title>[Cutlass 3.3.0 submodule upgrade] (#118629)</title>
      <link>https://github.com/pytorch/pytorch/commit/35f3ccffd4dd836d71b1db6d560800597979ec5b</link>
      <description><![CDATA[<p>[Cutlass 3.3.0 submodule upgrade] (#118629)</p>
<p>Cutlass 3.3 offers the following improvements:</p>
<p>Adds support for mixed precision GEMMs On Hopper and Ampere Adds support for &lt; 16B aligned GEMMs on Hopper<br />
Enhancements to EVT<br />
Enhancements to Python interface<br />
Enhancements to Sub-byte type handling in CuTe<br />
Several other bug-fixes and performance improvements. minor doc update<br />
Test Plan:</p>
<p>CI ( ciflow/trunk, ciflow/inductor )<br />
pytest test/inductor/test_max_autotune.py</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118629<br />
Approved by: https://github.com/drisspg, https://github.com/Skylion007, https://github.com/khabinov</p>]]></description>
      <pubDate>Wed, 31 Jan 2024 05:53:58 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/35f3ccffd4dd836d71b1db6d560800597979ec5b</guid>
    </item>
    <item>
      <title>Reland: [aotinductor] Replicate split_cat from torch IR to predispatch IR" (#118590)</title>
      <link>https://github.com/pytorch/pytorch/commit/6fa162e68148c10626bc824bc3eb31d56db4c2d8</link>
      <description><![CDATA[<p>Reland: [aotinductor] Replicate split_cat from torch IR to predispatch IR" (#118590)</p>
<p>Summary:<br />
This is part the pass migration efforts. The final target is removing the acc tracer in AOTI.<br />
In this diff, I did a few things:<br />
1. copy and modify the <code>fx_passes/split_cat.py</code> passes based on predispatch IR.<br />
2. verify the correctness by copying the <code>test_split_cat_fx_passes.py</code> and create a new file <code>test_split_cat_fx_passes_aten_fb.py</code> which is executed in AOTI and checked the counters<br />
3. create a util function to execute the pass and compare the before/after graph to give user more information like pass effect and time spent. It will create logs like<br />
<code>[2024-01-25 20:26:48,997] torch._inductor.utils: [INFO] [Pre grad(predispatch IR)]Apply split_cat, index: 0, save before/after graph to /tmp/tmpvlpwrklp, graph before/after are the same = False, time elapsed = 0:00:00.001585
[2024-01-25 20:26:49,000] torch._inductor.utils: [INFO] [Pre grad(predispatch IR)]Apply split_cat, index: 1, save before/after graph to /tmp/tmpz_onjfeu, graph before/after are the same = False, time elapsed = 0:00:00.001873
[2024-01-25 20:26:49,002] torch._inductor.utils: [INFO] [Pre grad(predispatch IR)]Apply split_cat, index: 2, save before/after graph to /tmp/tmpgkck8yko, graph before/after are the same = True, time elapsed = 0:00:00.000269
[2024-01-25 20:26:49,007] torch._inductor.utils: [INFO] [Pre grad(predispatch IR)]Apply split_cat, index: 3, save before/after graph to /tmp/tmpquenq06y, graph before/after are the same = False, time elapsed = 0:00:00.003621
[2024-01-25 20:26:49,009] torch._inductor.utils: [INFO] [Pre grad(predispatch IR)]Apply split_cat, index: 4, save before/after graph to /tmp/tmpi8fia0dv, graph before/after are the same = True, time elapsed = 0:00:00.000190</code></p>
<p>Differential Revision: D53171027</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118590<br />
Approved by: https://github.com/kflu, https://github.com/khabinov, https://github.com/chenyang78</p>]]></description>
      <pubDate>Tue, 30 Jan 2024 16:09:46 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/6fa162e68148c10626bc824bc3eb31d56db4c2d8</guid>
    </item>
    <item>
      <title>Workaround for super() calls in test_torchinductor_dynamic_shapes (#118586)</title>
      <link>https://github.com/pytorch/pytorch/commit/f2682e75e6fd735c4a84afe59eafd541f7643f4a</link>
      <description><![CDATA[<p>Workaround for super() calls in test_torchinductor_dynamic_shapes (#118586)</p>
<p>Info about super in dynamic classes:<br />
https://stackoverflow.com/questions/71879642/how-to-pass-function-with-super-when-creating-class-dynamically<br />
https://stackoverflow.com/questions/43782944/super-does-not-work-together-with-type-supertype-obj-obj-must-be-an-i</p>
<p>Calling super(TestCase) actually calls TestCase's parent's functions, bypassing TestCase itself's functions</p>
<p>Mainly doing this because it's making disable bot spam</p>
<p>Test: checked locally and check that https://github.com/pytorch/pytorch/issues/117954 actually got skipped</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118586<br />
Approved by: https://github.com/huydhn</p>]]></description>
      <pubDate>Tue, 30 Jan 2024 13:34:05 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/f2682e75e6fd735c4a84afe59eafd541f7643f4a</guid>
    </item>
    <item>
      <title>[inductor] Use at::detail::empty_strided_* in cpp_wraper mode (#118490)</title>
      <link>https://github.com/pytorch/pytorch/commit/e332653eb38b6f97e8088b4d3adc5b112fe8f761</link>
      <description><![CDATA[<p>[inductor] Use at::detail::empty_strided_* in cpp_wraper mode (#118490)</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118490<br />
Approved by: https://github.com/desertfire</p>]]></description>
      <pubDate>Tue, 30 Jan 2024 13:03:19 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/e332653eb38b6f97e8088b4d3adc5b112fe8f761</guid>
    </item>
    <item>
      <title>[inductor][cpp] support scalar value in vec reduction (#118511)</title>
      <link>https://github.com/pytorch/pytorch/commit/e5bb527d3e91b244404e142dfac8e9e55e02aa81</link>
      <description><![CDATA[<p>[inductor][cpp] support scalar value in vec reduction (#118511)</p>
<p>Fix https://github.com/pytorch/pytorch/issues/118379</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118511<br />
Approved by: https://github.com/leslie-fang-intel, https://github.com/lezcano, https://github.com/jansel</p>]]></description>
      <pubDate>Tue, 30 Jan 2024 05:07:43 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/e5bb527d3e91b244404e142dfac8e9e55e02aa81</guid>
    </item>
    <item>
      <title>[inductor] Fix codegen bug with Native Triton kernels with  ReinterpretView args (#118569)</title>
      <link>https://github.com/pytorch/pytorch/commit/8be6dee14b76f63dea1e9329d6cd0fdc9552a2d6</link>
      <description><![CDATA[<p>[inductor] Fix codegen bug with Native Triton kernels with  ReinterpretView args (#118569)</p>
<p>Summary:</p>
<h3>Context</h3>
<p>It's possible for the args of a user-defined Triton Kernel to be codegen-ed twiced. But this only happens if the arg is a <code>ReinterpretView</code>.<br />
* First via <code>arg.codegen_reference()</code> in <code>define_user_defined_triton_kernel()</code><br />
* Second in <code>self.codegen_kwargs()</code>.</p>
<p>When using <code>abi_compatible=True</code>, the duplicate codegen will look like the code below. The issue in the code is that one of the Tensors, internal to the graph, isn't properly freed. This scenario was eventually exposed as a memory leak when we re-ran an AOTInductor model many times and observed <code>memory.used</code> increase after each iteration.<br />
<code>auto tmp_tensor_handle_0 = reinterpret_tensor_wrapper(buf1, 2, int_array_0, int_array_1, 0L);
auto tmp_tensor_handle_1 = reinterpret_tensor_wrapper(buf1, 2, int_array_0, int_array_1, 0L);
...
// There's no wrap_with_raii_handle_if_needed() for tmp_tensor_handle_0.
// And there's no reference to tmp_tensor_handle_0.
// Thus, tmp_tensor_handle_0 is left as an AtenTensorHandle which isn't
// automatically cleaned-up like RAIIAtenTensorHandle
CUdeviceptr var_6;
aoti_torch_get_data_ptr(wrap_with_raii_handle_if_needed(tmp_tensor_handle_1), reinterpret_cast&lt;void**&gt;(&amp;var_6));
void* kernel_args_var_2[] = {..., &amp;var_6, ...};
launchKernel(kernels.add_kernel_0, ..., kernel_args_var_2);</code></p>
<h3>Solution</h3>
<p>We just need the arg's buffer name when creating the <code>TensorArg</code> in <code>define_user_defined_triton_kernel()</code>. Thus, just return the buffer's name and avoid any potential side-effects with <code>arg.codegen_reference()</code>.</p>
<p>Test Plan:</p>
<h3>Inspect device memory allocated</h3>
<p>```</p>
<h1>Before diff</h1>
<p>0 device memory 2048<br />
1 device memory 2560<br />
2 device memory 3072<br />
3 device memory 3584<br />
4 device memory 4096<br />
5 device memory 4608</p>
<h1>With diff (memory usage doesn't grow)</h1>
<p>0 device memory 1536<br />
1 device memory 1536<br />
2 device memory 1536<br />
3 device memory 1536<br />
4 device memory 1536<br />
5 device memory 1536<br />
```</p>
<p>Reviewed By: jingsh, tissue3</p>
<p>Differential Revision: D53190934</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118569<br />
Approved by: https://github.com/oulgen</p>]]></description>
      <pubDate>Mon, 29 Jan 2024 21:19:32 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/8be6dee14b76f63dea1e9329d6cd0fdc9552a2d6</guid>
    </item>
    <item>
      <title>Reland PR117393 [inductor/fb] log config dict when compilation finishes (#118552)</title>
      <link>https://github.com/pytorch/pytorch/commit/5dfcf07449c9ffc7a2277c9782c88444ca11a77c</link>
      <description><![CDATA[<p>Reland PR117393 [inductor/fb] log config dict when compilation finishes (#118552)</p>
<p>Summary: Reverted due to merge conflict</p>
<p>Differential Revision: D53188124</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118552<br />
Approved by: https://github.com/mengluy0125</p>]]></description>
      <pubDate>Mon, 29 Jan 2024 20:34:22 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/5dfcf07449c9ffc7a2277c9782c88444ca11a77c</guid>
    </item>
    <item>
      <title>[ez][inductor] fix a typo in should_pad_bench (#118598)</title>
      <link>https://github.com/pytorch/pytorch/commit/0d47f6a44f4a72324ee096c5bbdb107b379a55c2</link>
      <description><![CDATA[<p>[ez][inductor] fix a typo in should_pad_bench (#118598)</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118598<br />
Approved by: https://github.com/eellison</p>]]></description>
      <pubDate>Mon, 29 Jan 2024 19:49:44 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/0d47f6a44f4a72324ee096c5bbdb107b379a55c2</guid>
    </item>
    <item>
      <title>[inductor] Remove ROCm xfail on test_cum{sum,prod}_zero_dim (#118558)</title>
      <link>https://github.com/pytorch/pytorch/commit/f99adbb4ec7a738684925d111f81f6b523cc83d0</link>
      <description><![CDATA[<p>[inductor] Remove ROCm xfail on test_cum{sum,prod}_zero_dim (#118558)</p>
<p>Fixes #118540, fixes #118541</p>
<p>Since the zero-dim case reduces to a pointwise operation, we don't fallback on<br />
ROCm.</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118558<br />
Approved by: https://github.com/malfet</p>]]></description>
      <pubDate>Mon, 29 Jan 2024 12:23:40 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/f99adbb4ec7a738684925d111f81f6b523cc83d0</guid>
    </item>
    <item>
      <title>[inductor][cpp] enable vectorization with constant bool (#118380)</title>
      <link>https://github.com/pytorch/pytorch/commit/04c1df651aa58bea50977f4efcf19b09ce27cefd</link>
      <description><![CDATA[<p>[inductor][cpp] enable vectorization with constant bool (#118380)</p>
<p>Related model DebertaForQuestionAnswering etc. For DebertaForQuestionAnswering, single thread, measured on ICX:<br />
Before: 0.990x, After: 1.043x</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118380<br />
Approved by: https://github.com/leslie-fang-intel, https://github.com/jansel</p>]]></description>
      <pubDate>Mon, 29 Jan 2024 05:31:22 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/04c1df651aa58bea50977f4efcf19b09ce27cefd</guid>
    </item>
    <item>
      <title>[Inductor] Fix Argmax codegen with Nan input (#118358)</title>
      <link>https://github.com/pytorch/pytorch/commit/ee3dfbbe470822a50516310384ecce071ec79f7c</link>
      <description><![CDATA[<p>[Inductor] Fix Argmax codegen with Nan input (#118358)</p>
<p><strong>Summary</strong><br />
Fix issue https://github.com/pytorch/pytorch/issues/118266, current <code>torch.argmax</code> and <code>torch.argmin</code> has different return values with eager and Inductor cpp backend when inputs has <code>Nan</code> value. Align cpp backend results to eager by reusing the compare function.</p>
<p><strong>Test Plan</strong><br />
<code>python -u -m pytest -s -v test_cpu_repro.py -k test_argmin_cpu_only
python -u -m pytest -s -v test_cpu_repro.py -k test_argmax_argmin_with_nan_value</code></p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118358<br />
Approved by: https://github.com/lezcano, https://github.com/jgong5, https://github.com/jansel</p>]]></description>
      <pubDate>Mon, 29 Jan 2024 01:09:46 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/ee3dfbbe470822a50516310384ecce071ec79f7c</guid>
    </item>
    <item>
      <title>Add some type annotations to torch._inductor.codegen.wrapper (#118491)</title>
      <link>https://github.com/pytorch/pytorch/commit/2951bbf0f72dcbf8841dafbd6e764c07eb72edc6</link>
      <description><![CDATA[<p>Add some type annotations to torch._inductor.codegen.wrapper (#118491)</p>
<p>Signed-off-by: Edward Z. Yang <a href="&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#101;&#122;&#121;&#97;&#110;&#103;&#64;&#109;&#101;&#116;&#97;&#46;&#99;&#111;&#109;">&#101;&#122;&#121;&#97;&#110;&#103;&#64;&#109;&#101;&#116;&#97;&#46;&#99;&#111;&#109;</a></p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118491<br />
Approved by: https://github.com/Skylion007</p>]]></description>
      <pubDate>Sun, 28 Jan 2024 22:17:27 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/2951bbf0f72dcbf8841dafbd6e764c07eb72edc6</guid>
    </item>
    <item>
      <title>Unify MYPYINDUCTOR and MYPY (#118432)</title>
      <link>https://github.com/pytorch/pytorch/commit/d03173e88cf43544fbeb458e1b8d7122038bef5b</link>
      <description><![CDATA[<p>Unify MYPYINDUCTOR and MYPY (#118432)</p>
<p>The original motivation for MYPYINDUCTOR was a faster type checking configuration that only checked a subset of files. With the removal of <code>follow_imports = ignore</code>, we are now able to use dmypy to do fast incremental typechecking, eliminating the need for this.</p>
<p>Perhaps erroneously, when I tee'ed up this PR I elected to delete the <code>follow_imports = skip</code> designations in the mypy-inductor.ini. This lead to a number of extra type error suppressions that I manually edited. You will need to review.</p>
<p>Signed-off-by: Edward Z. Yang <a href="&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#101;&#122;&#121;&#97;&#110;&#103;&#64;&#109;&#101;&#116;&#97;&#46;&#99;&#111;&#109;">&#101;&#122;&#121;&#97;&#110;&#103;&#64;&#109;&#101;&#116;&#97;&#46;&#99;&#111;&#109;</a></p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118432<br />
Approved by: https://github.com/Skylion007<br />
ghstack dependencies: #118414, #118418</p>]]></description>
      <pubDate>Sat, 27 Jan 2024 09:23:20 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/d03173e88cf43544fbeb458e1b8d7122038bef5b</guid>
    </item>
    <item>
      <title>Replace follow_imports = silent with normal (#118414)</title>
      <link>https://github.com/pytorch/pytorch/commit/9bce208dfbdb71e38f9e9ee38a07d43645ffb82a</link>
      <description><![CDATA[<p>Replace follow_imports = silent with normal (#118414)</p>
<p>This is a lot of files changed! Don't panic! Here's how it works:</p>
<ul>
<li>Previously, we set <code>follow_imports = silent</code> for our mypy.ini configuration. Per https://mypy.readthedocs.io/en/stable/running_mypy.html#follow-imports, what this does is whenever we have an import to a module which is not listed as a file to be typechecked in mypy, we typecheck it as normal but suppress all errors that occurred in that file.</li>
<li>When mypy is run inside lintrunner, the list of files is precisely the files covered by the glob in lintrunner.toml, but with files in excludes excluded.</li>
<li>The top-level directive <code># mypy: ignore-errors</code> instructs mypy to typecheck the file as normal, but ignore all errors.</li>
<li>Therefore, it should be equivalent to set <code>follow_imports = normal</code>, if we put <code># mypy: ignore-errors</code> on all files that were previously excluded from the file list.</li>
<li>Having done this, we can remove the exclude list from .lintrunner.toml, since excluding a file from typechecking is baked into the files themselves.</li>
<li>torch/_dynamo and torch/_inductor were previously in the exclude list, because they were covered by MYPYINDUCTOR. It is not OK to mark these as <code># mypy: ignore-errors</code> as this will impede typechecking on the alternate configuration. So they are temporarily being checked twice, but I am suppressing the errors in these files as the configurations are not quite the same. I plan to unify the configurations so this is only a temporary state.</li>
<li>There were some straggler type errors after these changes somehow, so I fixed them as needed. There weren't that many.</li>
</ul>
<p>In the future, to start type checking a file, just remove the ignore-errors directive from the top of the file.</p>
<p>The codemod was done with this script authored by GPT-4:</p>
<p>```<br />
import glob</p>
<p>exclude_patterns = [<br />
    ...<br />
]</p>
<p>for pattern in exclude_patterns:<br />
    for filepath in glob.glob(pattern, recursive=True):<br />
        if filepath.endswith('.py'):<br />
            with open(filepath, 'r+') as f:<br />
                content = f.read()<br />
                f.seek(0, 0)<br />
                f.write('# mypy: ignore-errors\n\n' + content)<br />
```</p>
<p>Signed-off-by: Edward Z. Yang <a href="&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#101;&#122;&#121;&#97;&#110;&#103;&#64;&#109;&#101;&#116;&#97;&#46;&#99;&#111;&#109;">&#101;&#122;&#121;&#97;&#110;&#103;&#64;&#109;&#101;&#116;&#97;&#46;&#99;&#111;&#109;</a></p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/118414<br />
Approved by: https://github.com/thiagocrepaldi, https://github.com/albanD</p>]]></description>
      <pubDate>Fri, 26 Jan 2024 18:44:11 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/9bce208dfbdb71e38f9e9ee38a07d43645ffb82a</guid>
    </item>
    <item>
      <title>[inductor] Handle cum{sum,prod} on zero-dim tensors (#117990)</title>
      <link>https://github.com/pytorch/pytorch/commit/f129e3fe034c0052d1d45856ac10fc4b3a1e9700</link>
      <description><![CDATA[<p>[inductor] Handle cum{sum,prod} on zero-dim tensors (#117990)</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/117990<br />
Approved by: https://github.com/lezcano</p>]]></description>
      <pubDate>Fri, 26 Jan 2024 14:21:42 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/f129e3fe034c0052d1d45856ac10fc4b3a1e9700</guid>
    </item>
  </channel>
</rss>
