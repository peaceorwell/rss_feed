<?xml version='1.0' encoding='UTF-8'?>
<rss version="2.0">
  <channel>
    <title>GitHub Commits Feed</title>
    <link>https://github.com/username/repo/commits</link>
    <description>Recent commits from GitHub repo</description>
    <title>GitHub Commits Feed</title><link>https://github.com/username/repo/commits</link><description>Recent commits from GitHub repo</description><title>GitHub Commits Feed</title><link>https://github.com/username/repo/commits</link><description>Recent commits from GitHub repo</description><title>GitHub Commits Feed</title><link>https://github.com/username/repo/commits</link><description>Recent commits from GitHub repo</description><title>GitHub Commits Feed</title><link>https://github.com/username/repo/commits</link><description>Recent commits from GitHub repo</description><title>GitHub Commits Feed</title><link>https://github.com/username/repo/commits</link><description>Recent commits from GitHub repo</description><title>GitHub Commits Feed</title><link>https://github.com/username/repo/commits</link><description>Recent commits from GitHub repo</description><title>GitHub Commits Feed</title><link>https://github.com/username/repo/commits</link><description>Recent commits from GitHub repo</description><title>GitHub Commits Feed</title><link>https://github.com/username/repo/commits</link><description>Recent commits from GitHub repo</description><title>GitHub Commits Feed</title><link>https://github.com/username/repo/commits</link><description>Recent commits from GitHub repo</description><title>GitHub Commits Feed</title><link>https://github.com/username/repo/commits</link><description>Recent commits from GitHub repo</description><title>GitHub Commits Feed</title><link>https://github.com/username/repo/commits</link><description>Recent commits from GitHub repo</description><title>GitHub Commits Feed</title><link>https://github.com/username/repo/commits</link><description>Recent commits from GitHub repo</description><title>GitHub Commits Feed</title><link>https://github.com/username/repo/commits</link><description>Recent commits from GitHub repo</description><item><title>[inductor max autotune] Detailed autotuning result logs ( machine-readable ) (#119004)</title><link>https://github.com/pytorch/pytorch/commit/96eff4ef70e49d182fbd61eeb824944610622567</link><description><![CDATA[<p>[inductor max autotune] Detailed autotuning result logs ( machine-readable ) (#119004)</p>
<p>This diff introduces a new separate logging of autotuning results,<br />
with the intention of making the results analyzable, specifically<br />
those for the new experimental Cutlass backend.</p>
<p>Results are logged as text files with one JSON document corresponding to a single benchmark result per line.</p>
<p>Pull Request resolved: https://github.com/pytorch/pytorch/pull/119004<br />
Approved by: https://github.com/jansel<br />
ghstack dependencies: #120620</p>]]></description><pubDate>Thu, 29 Feb 2024 10:24:13 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/96eff4ef70e49d182fbd61eeb824944610622567</guid></item><item><title>Add some more symbolic shapes related files to ciflow/inductor (#120887)</title><link>https://github.com/pytorch/pytorch/commit/664dd61b2962bb0c0e06761ba80a3a4b0b92e9e5</link><description><![CDATA[<p>Add some more symbolic shapes related files to ciflow/inductor (#120887)</p>
<p>Signed-off-by: Edward Z. Yang <a href="&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#101;&#122;&#121;&#97;&#110;&#103;&#64;&#109;&#101;&#116;&#97;&#46;&#99;&#111;&#109;">&#101;&#122;&#121;&#97;&#110;&#103;&#64;&#109;&#101;&#116;&#97;&#46;&#99;&#111;&#109;</a><br />
Pull Request resolved: https://github.com/pytorch/pytorch/pull/120887<br />
Approved by: https://github.com/janeyx99, https://github.com/malfet</p>]]></description><pubDate>Thu, 29 Feb 2024 08:59:32 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/664dd61b2962bb0c0e06761ba80a3a4b0b92e9e5</guid></item><item><title>[Inductor] Track constant's original_fqn mapping  (#120524)</title><link>https://github.com/pytorch/pytorch/commit/3e8b56d362ace0eaa5007e69b431b7ba3f75be46</link><description>&lt;p&gt;[Inductor] Track constant's original_fqn mapping  (#120524)&lt;/p&gt;
&lt;p&gt;When compiling an deserialized ExportedProgram, constantâ€™s original_fqn is not populated(). Highlighted line is missing, And a latter assertion is breaking due to original_fqn missing.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;constants_info_[0].name = "L__self___w_pre";
    constants_info_[0].dtype = static_cast&amp;lt;int32_t&amp;gt;(cached_torch_dtype_float32);
    constants_info_[0].offset = 0;
    constants_info_[0].data_size = 64;
    constants_info_[0].from_folded = false;
    constants_info_[0].shape = {4, 4};
    constants_info_[0].stride = {4, 1};
    // constants_info_[0].original_fqn = "w_pre";   // this line is missing&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Inductor is relying &lt;code&gt;dynamo_flat_name_to_original_fqn&lt;/code&gt; to populate the original_fqn field. This field originates from &lt;code&gt;graph_module.meta["dynamo_flat_name_to_original_fqn"]&lt;/code&gt;, and is set during dynamo tracing. However, when compiling&lt;br /&gt;
an deserialized ExportedProgram, we don't do dynamo tracing, thus this field is missing.&lt;/p&gt;
&lt;p&gt;As a fix, I maintain AOTI's own mapping for constant tensor's fqn.&lt;/p&gt;
&lt;p&gt;Differential Revision: D54097073&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/120524&lt;br /&gt;
Approved by: https://github.com/chenyang78&lt;/p&gt;</description><pubDate>Wed, 28 Feb 2024 09:36:29 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/3e8b56d362ace0eaa5007e69b431b7ba3f75be46</guid></item><item><title>Move user defined triton tests to inductor test folder (#120738)</title><link>https://github.com/pytorch/pytorch/commit/dfe7b9d471903b5c58a9962103db2be40e361f2b</link><description>&lt;p&gt;Move user defined triton tests to inductor test folder (#120738)&lt;/p&gt;
&lt;p&gt;Summary: FBCode CI does not compile torch with CUDA for tests in dynamo folder, instead of adding a special rule, lets move these tests to inductor folder.&lt;/p&gt;
&lt;p&gt;Test Plan:&lt;br /&gt;
&lt;code&gt;buck run mode/opt //caffe2/test/inductor/:triton_kernels&lt;/code&gt;&lt;br /&gt;
now works instead of skipping tests&lt;/p&gt;
&lt;p&gt;Differential Revision: D54280629&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/120738&lt;br /&gt;
Approved by: https://github.com/aakhundov&lt;/p&gt;</description><pubDate>Wed, 28 Feb 2024 09:03:41 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/dfe7b9d471903b5c58a9962103db2be40e361f2b</guid></item><item><title>[inductor][Gemm] Autotune with matrix_instr_nonkdim for AMDGPU (#120639)</title><link>https://github.com/pytorch/pytorch/commit/78f53a3f731ee67dcffd308519ed48a745640dde</link><description>&lt;p&gt;[inductor][Gemm] Autotune with matrix_instr_nonkdim for AMDGPU (#120639)&lt;/p&gt;
&lt;p&gt;Summary:&lt;br /&gt;
Matrix multiplication with Triton is usually in a tiled way. For a large tile size that single hardware instruction cannot handle, i.e, a 128*128 size matmul, it has to be broken down to a sequence of smaller hardware mma instructions. On AMDGPU, matrix_instr_nonkdim controls the shape of the mma instructions, of which the default value is 32 in Triton. This means by default Triton will decompose a large tiled matmul operation into a sequence of 32x32x8 mma instructions. There are other mma instructions available, such as 16x16x16 which requires matrix_instr_nonkdim=16. This change enables tuning the value for Gemm which seems to improve its performance by 20% - 2x.&lt;/p&gt;
&lt;p&gt;Similar changes has been done to the HSTU ragged attention kernel D53386525.&lt;/p&gt;
&lt;p&gt;Test Plan:&lt;/p&gt;
&lt;p&gt;Before:&lt;br /&gt;
&lt;code&gt;AUTOTUNE mm(1024x1024, 1024x1024)
  ExternKernelCaller(extern_kernels.mm) 0.0410 ms 100.0%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=4 0.0487 ms 84.2%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=4 0.0544 ms 75.4%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=8 0.0633 ms 64.8%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=8 0.0687 ms 59.7%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=8 0.0716 ms 57.3%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=4 0.0748 ms 54.9%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=4 0.0788 ms 52.0%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=32, BLOCK_N=32, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=2 0.1014 ms 40.5%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=8 0.1069 ms 38.4%
  SingleProcess AUTOTUNE takes 8.1153 seconds&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After:&lt;br /&gt;
&lt;code&gt;AUTOTUNE mm(1024x1024, 1024x1024)
  ExternKernelCaller(extern_kernels.mm) 0.0417 ms 100.0%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=8 0.0470 ms 88.7%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=4 0.0488 ms 85.4%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=32, num_stages=0, num_warps=4 0.0490 ms 85.0%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=4 0.0525 ms 79.5%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=32, num_stages=0, num_warps=4 0.0553 ms 75.4%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=8 0.0574 ms 72.7%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=32, num_stages=0, num_warps=8 0.0634 ms 65.8%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=32, BLOCK_N=32, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=2 0.0655 ms 63.7%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=8 0.0681 ms 61.2%
  SingleProcess AUTOTUNE takes 11.4076 seconds&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Before:&lt;br /&gt;
&lt;code&gt;AUTOTUNE mm(2048x2048, 2048x2048)
  ExternKernelCaller(extern_kernels.mm) 0.2094 ms 100.0%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=8 0.2452 ms 85.4%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=8 0.2763 ms 75.8%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=4 0.2836 ms 73.8%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=4 0.2854 ms 73.4%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=4 0.2951 ms 71.0%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=8 0.2970 ms 70.5%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=4 0.4184 ms 50.1%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=8 0.5097 ms 41.1%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=32, BLOCK_N=32, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=2 0.5570 ms 37.6%
  SingleProcess AUTOTUNE takes 3.4052 seconds&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After:&lt;br /&gt;
  ```&lt;br /&gt;
AUTOTUNE mm(2048x2048, 2048x2048)&lt;br /&gt;
  ExternKernelCaller(extern_kernels.mm) 0.2117 ms 100.0%&lt;br /&gt;
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=32, num_stages=0, num_warps=8 0.2429 ms 87.2%&lt;br /&gt;
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=8 0.2485 ms 85.2%&lt;br /&gt;
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=8 0.2526 ms 83.8%&lt;br /&gt;
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=4 0.2537 ms 83.5%&lt;br /&gt;
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=8 0.2554 ms 82.9%&lt;br /&gt;
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=4 0.2623 ms 80.7%&lt;br /&gt;
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=4 0.2695 ms 78.5%&lt;br /&gt;
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=32, num_stages=0, num_warps=8 0.2758 ms 76.8%&lt;br /&gt;
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=32, num_stages=0, num_warps=4 0.2792 ms 75.8%&lt;br /&gt;
  SingleProcess AUTOTUNE takes 11.3538 seconds&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Before:&lt;br /&gt;
&lt;code&gt;AUTOTUNE mm(4096x4096, 4096x4096)
  ExternKernelCaller(extern_kernels.mm) 1.5901 ms 100.0%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=8 1.9380 ms 82.0%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=4 1.9943 ms 79.7%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=4 2.0640 ms 77.0%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=8 2.0941 ms 75.9%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=4 2.1272 ms 74.7%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=8 2.1554 ms 73.8%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=4 2.2931 ms 69.3%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=8 3.7016 ms 43.0%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=32, BLOCK_N=32, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=2 4.6021 ms 34.6%
  SingleProcess AUTOTUNE takes 9.0523 seconds&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After:&lt;br /&gt;
&lt;code&gt;AUTOTUNE mm(4096x4096, 4096x4096)
  ExternKernelCaller(extern_kernels.mm) 1.5862 ms 100.0%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=8 1.6924 ms 93.7%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=8 1.7616 ms 90.0%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=4 1.8159 ms 87.4%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=4 1.9340 ms 82.0%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=8 1.9352 ms 82.0%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=4 2.0378 ms 77.8%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=4 2.0983 ms 75.6%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=8 2.1138 ms 75.0%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=32, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=8 2.1657 ms 73.2%
  SingleProcess AUTOTUNE takes 8.2225 seconds&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Before:&lt;br /&gt;
&lt;code&gt;AUTOTUNE mm(8192x8192, 8192x8192)
  ExternKernelCaller(extern_kernels.mm) 12.0134 ms 100.0%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=8 14.8082 ms 81.1%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=4 15.4242 ms 77.9%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=8 16.6869 ms 72.0%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=4 16.7751 ms 71.6%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=4 17.0145 ms 70.6%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=8 17.1363 ms 70.1%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=4 18.2159 ms 66.0%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=64, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=8 29.4726 ms 40.8%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=32, BLOCK_N=32, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, num_stages=0, num_warps=2 37.9039 ms 31.7%
  SingleProcess AUTOTUNE takes 11.0074 seconds&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After:&lt;br /&gt;
&lt;code&gt;AUTOTUNE mm(8192x8192, 8192x8192)
  ExternKernelCaller(extern_kernels.mm) 11.9554 ms 100.0%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=8 12.9953 ms 92.0%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=8 13.7726 ms 86.8%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=4 13.9647 ms 85.6%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=32, num_stages=0, num_warps=8 14.9728 ms 79.8%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=8 15.3729 ms 77.8%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=4 15.3955 ms 77.7%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=128, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=32, num_stages=0, num_warps=4 15.5647 ms 76.8%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=32, BLOCK_M=64, BLOCK_N=128, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=4 16.0037 ms 74.7%
  ACC_TYPE='tl.float32', ALLOW_TF32=True, BLOCK_K=16, BLOCK_M=64, BLOCK_N=64, B_PROLOGUE_CAST_TYPE=None, EVEN_K=True, GROUP_M=8, matrix_instr_nonkdim=16, num_stages=0, num_warps=4 16.7432 ms 71.4%
  SingleProcess AUTOTUNE takes 14.9839 seconds&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Reviewed By: xw285cornell, nmacchioni&lt;/p&gt;
&lt;p&gt;Differential Revision: D54203170&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/120639&lt;br /&gt;
Approved by: https://github.com/xw285cornell, https://github.com/jansel&lt;/p&gt;</description><pubDate>Tue, 27 Feb 2024 10:16:33 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/78f53a3f731ee67dcffd308519ed48a745640dde</guid></item><item><title>[inductor] correctly retrieve the "shared" attribute from a Triton binary (#120666)</title><link>https://github.com/pytorch/pytorch/commit/c29ac05ac0a590dc62b165c8cc1309a3ac8b7f43</link><description>&lt;p&gt;[inductor] correctly retrieve the "shared" attribute from a Triton binary (#120666)&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/120666&lt;br /&gt;
Approved by: https://github.com/jansel&lt;/p&gt;</description><pubDate>Tue, 27 Feb 2024 05:10:09 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/c29ac05ac0a590dc62b165c8cc1309a3ac8b7f43</guid></item><item><title>[PT2][Inductor]Add unbind node normalization (#120253)</title><link>https://github.com/pytorch/pytorch/commit/55b590842787850e60e78220556a63ad162874eb</link><description>&lt;p&gt;[PT2][Inductor]Add unbind node normalization (#120253)&lt;/p&gt;
&lt;p&gt;Summary: Normalize unbind nodes for the followup split_cat pattern detection and node removals&lt;/p&gt;
&lt;p&gt;Test Plan:&lt;br /&gt;
&lt;code&gt;buck2 test //caffe2/test/inductor:split_cat_fx_passes&lt;/code&gt;&lt;br /&gt;
Buck UI: https://www.internalfb.com/buck2/f42297c2-2595-40a2-b270-5cec026f2fe4&lt;br /&gt;
Test UI: https://www.internalfb.com/intern/testinfra/testrun/17451448578242323&lt;br /&gt;
Network: Up: 132KiB  Down: 88KiB  (reSessionID-fc725143-317a-42a9-bc7e-0bbab6ef9e5c)&lt;br /&gt;
Jobs completed: 27. Time elapsed: 3:09.2s.&lt;br /&gt;
Cache hits: 0%. Commands: 1 (cached: 0, remote: 0, local: 1)&lt;br /&gt;
Tests finished: Pass 11. Fail 0. Fatal 0. Skip 0. Build failure 0&lt;/p&gt;
&lt;p&gt;&lt;code&gt;buck2 test mode/opt mode/inplace caffe2/test/inductor/fb:test_split_cat_fx_passes_aten_fb&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Differential Revision: D53964593&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/120253&lt;br /&gt;
Approved by: https://github.com/jackiexu1992&lt;/p&gt;</description><pubDate>Mon, 26 Feb 2024 11:13:26 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/55b590842787850e60e78220556a63ad162874eb</guid></item><item><title>[inductor] Optimize welford reduction (#120330)</title><link>https://github.com/pytorch/pytorch/commit/7eb7ac815f0247a62b621897cea95ec4ca56d52e</link><description>&lt;p&gt;[inductor] Optimize welford reduction (#120330)&lt;/p&gt;
&lt;p&gt;This does two things,&lt;br /&gt;
1) Short circuit &lt;code&gt;welford_reduce&lt;/code&gt; on the first iteration to ignore the accumulator (big win for small &lt;code&gt;rnumel&lt;/code&gt;)&lt;br /&gt;
2) Replace division with multiplication by reciprocal&lt;/p&gt;
&lt;p&gt;Currently this is not enough to match two pass reduction with bfloat16 but it is still a significant improvement.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/120330&lt;br /&gt;
Approved by: https://github.com/lezcano&lt;/p&gt;</description><pubDate>Mon, 26 Feb 2024 09:01:47 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/7eb7ac815f0247a62b621897cea95ec4ca56d52e</guid></item><item><title>Use a dtype property in torch inductor nodes (#119227)</title><link>https://github.com/pytorch/pytorch/commit/182ed1e32cb42890c527c8d1d8f13ff594bb7ab1</link><description>&lt;p&gt;Use a dtype property in torch inductor nodes (#119227)&lt;/p&gt;
&lt;p&gt;I usually forget to do &lt;code&gt;x.get_dtype()&lt;/code&gt; and I type &lt;code&gt;x.dtype&lt;/code&gt;. Similarly for &lt;code&gt;layout, device, sizes&lt;/code&gt;. What do you think about making them properties?&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119227&lt;br /&gt;
Approved by: https://github.com/lezcano, https://github.com/jansel&lt;/p&gt;</description><pubDate>Fri, 23 Feb 2024 10:40:03 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/182ed1e32cb42890c527c8d1d8f13ff594bb7ab1</guid></item><item><title>Revert "[inductor] Optimize welford reduction (#120330)"</title><link>https://github.com/pytorch/pytorch/commit/2892d2f31baa8f1852e32beac31fa095cb9c499a</link><description>&lt;p&gt;Revert "[inductor] Optimize welford reduction (#120330)"&lt;/p&gt;
&lt;p&gt;This reverts commit 4c6ba16f825ca7b99133efca95da0b7112add66b.&lt;/p&gt;
&lt;p&gt;Reverted https://github.com/pytorch/pytorch/pull/120330 on behalf of https://github.com/jeffdaily due to broke ROCm CI while ROCm was in unstable status (&lt;a href="https://github.com/pytorch/pytorch/pull/120330#issuecomment-1961623739"&gt;comment&lt;/a&gt;)&lt;/p&gt;</description><pubDate>Fri, 23 Feb 2024 08:24:52 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/2892d2f31baa8f1852e32beac31fa095cb9c499a</guid></item><item><title>[inductor] decompose memory bound mm (#120047)</title><link>https://github.com/pytorch/pytorch/commit/2ba798df606ca1dd931e63aaacc78bfa2a3c04f5</link><description>&lt;p&gt;[inductor] decompose memory bound mm (#120047)&lt;/p&gt;
&lt;p&gt;Summary:&lt;br /&gt;
Decompose memory bound mm/bmm.&lt;br /&gt;
Linear decomposition result:  D53502768&lt;br /&gt;
BMM decomposition result: D53148650&lt;br /&gt;
 We should only decompose when&lt;br /&gt;
1)bmm, b is large, m,n,k is relative small&lt;br /&gt;
2)mm/addmm. m is large, n and K is relative small. e.g. mm of input gradient in linear backward should not be decomposed since m is small and n is large.&lt;br /&gt;
Need to conduct more experiments to see if we can find a better strategy for decomposition. I have tried to use a linear regression model (see the bento results) which does not fit well. For short term, we use heuristics to determine when to decompose.&lt;/p&gt;
&lt;p&gt;Test Plan:&lt;br /&gt;
&lt;code&gt;buck2 test mode/dev-nosan //caffe2/test/inductor:decompose_mem_bound_mm&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;COFFEE APS mc0:&lt;br /&gt;
baseline: aps-lsf-0124-bf16-267ccb7a0d&lt;br /&gt;
decompose: aps-lsf-0124-bf16-4e3824db40&lt;/p&gt;
&lt;p&gt;FIRST AFOC pyper mc1&lt;/p&gt;
&lt;p&gt;Differential Revision: D53602514&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/120047&lt;br /&gt;
Approved by: https://github.com/mengluy0125&lt;/p&gt;</description><pubDate>Thu, 22 Feb 2024 11:29:51 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/2ba798df606ca1dd931e63aaacc78bfa2a3c04f5</guid></item><item><title>[inductor] improve kernel metadata logging (#120274)</title><link>https://github.com/pytorch/pytorch/commit/a77226aa4981185281488f81ea9fd8925c02bc91</link><description>&lt;p&gt;[inductor] improve kernel metadata logging (#120274)&lt;/p&gt;
&lt;p&gt;Log a few more fields&lt;br /&gt;
- num_atomic_add: perf of kernels using atomic_add are usually data dependent. Our benchmarking code generate all indices to be 0 which will result in worse perf than reality.&lt;br /&gt;
- kernel_args_num_gb: estimate the amount of read/writes for kernel args. In-place args will be double counted. If we have a good estimation, this should be the lower bound of memory access that the GPU performs. Sometimes GPU will do more memory access since a single buffer may be access multiple times (e.g. for softmax when input tensor is quite large. cache only help a bit here). With this logged, and if we augment the metadata with amount of memory the GPU actually accessed, then it would be nice to dig into kernels that GPU access more memory.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/120274&lt;br /&gt;
Approved by: https://github.com/jansel&lt;br /&gt;
ghstack dependencies: #120266&lt;/p&gt;</description><pubDate>Thu, 22 Feb 2024 10:28:05 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/a77226aa4981185281488f81ea9fd8925c02bc91</guid></item><item><title>[inductor] Colorization improvements for bandwidth profiler (#120343)</title><link>https://github.com/pytorch/pytorch/commit/de600508018ee208dd8f65532d53bd59e14f85aa</link><description>&lt;p&gt;[inductor] Colorization improvements for bandwidth profiler (#120343)&lt;/p&gt;
&lt;p&gt;A couple things:&lt;br /&gt;
* Don't colorize output to the log file&lt;br /&gt;
* Don't repeatedly warn if colorama isn't installed&lt;/p&gt;
&lt;p&gt;Differential Revision: &lt;a href="https://our.internmc.facebook.com/intern/diff/D54027075/"&gt;D54027075&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/120343&lt;br /&gt;
Approved by: https://github.com/Chillee, https://github.com/shunting314&lt;/p&gt;</description><pubDate>Thu, 22 Feb 2024 07:25:46 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/de600508018ee208dd8f65532d53bd59e14f85aa</guid></item><item><title>[inductor] When generating debug logs don't fail if nvcc not found (#120346)</title><link>https://github.com/pytorch/pytorch/commit/0e4bd25a33a5b4b4d84bd2bb3e6ea8a609eaf897</link><description>&lt;p&gt;[inductor] When generating debug logs don't fail if nvcc not found (#120346)&lt;/p&gt;
&lt;p&gt;If nvcc isn't found subprocess throws a CalledProcessError&lt;/p&gt;
&lt;p&gt;Differential Revision: &lt;a href="https://our.internmc.facebook.com/intern/diff/D54028438/"&gt;D54028438&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/120346&lt;br /&gt;
Approved by: https://github.com/Skylion007, https://github.com/shunting314&lt;/p&gt;</description><pubDate>Thu, 22 Feb 2024 06:25:34 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/0e4bd25a33a5b4b4d84bd2bb3e6ea8a609eaf897</guid></item><item><title>[Inductor] Fix bug around out of order constexprs in inductor (#120287)</title><link>https://github.com/pytorch/pytorch/commit/29b2131c626ee5fcd7d6e5200c05bda75121afa9</link><description>&lt;p&gt;[Inductor] Fix bug around out of order constexprs in inductor (#120287)&lt;/p&gt;
&lt;p&gt;Inductor signature/config generation code assumes that all constexprs come as last arguments of the function. This is not always true for user defined kernels.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/120287&lt;br /&gt;
Approved by: https://github.com/jansel&lt;/p&gt;</description><pubDate>Wed, 21 Feb 2024 09:39:41 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/29b2131c626ee5fcd7d6e5200c05bda75121afa9</guid></item><item><title>Revert "use two pass reduction for deterministic reduction order (#11â€¦ (#120243)</title><link>https://github.com/pytorch/pytorch/commit/be8ba5ef2daf684e7da47c2765c01faeb8784cec</link><description>&lt;p&gt;Revert "use two pass reduction for deterministic reduction order (#11â€¦ (#120243)&lt;/p&gt;
&lt;p&gt;This reverts commit cc7ef43423fe36cf1778a9c9643454d62050a5b5.&lt;/p&gt;
&lt;p&gt;Manual revert because of the conflict in: test/inductor/test_cpu_repro.py , conflict with this PR: https://github.com/pytorch/pytorch/pull/118365&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/120243&lt;br /&gt;
Approved by: https://github.com/malfet, https://github.com/huydhn&lt;/p&gt;</description><pubDate>Tue, 20 Feb 2024 12:50:29 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/be8ba5ef2daf684e7da47c2765c01faeb8784cec</guid></item><item><title>[Inductor][bugFix] fix a bug in merge_splits (#119956)</title><link>https://github.com/pytorch/pytorch/commit/4f0f25b7ce5e5b39fc2999933d210948dae0460e</link><description>&lt;p&gt;[Inductor][bugFix] fix a bug in merge_splits (#119956)&lt;/p&gt;
&lt;p&gt;Summary: RecGPT got a keyerror when running the split_cat, and it was caused by a corner case hit.&lt;/p&gt;
&lt;p&gt;Test Plan: P1184947021&lt;/p&gt;
&lt;p&gt;Differential Revision: D53791839&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119956&lt;br /&gt;
Approved by: https://github.com/jackiexu1992&lt;/p&gt;</description><pubDate>Tue, 20 Feb 2024 12:38:34 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/4f0f25b7ce5e5b39fc2999933d210948dae0460e</guid></item><item><title>[Inductor][fx pass] Add split cat pattern to remove cat nodes (#115004)</title><link>https://github.com/pytorch/pytorch/commit/b33e8d3f6bde3fa1c5ae57eb82d321dbf8f8c24a</link><description>&lt;p&gt;[Inductor][fx pass] Add split cat pattern to remove cat nodes (#115004)&lt;/p&gt;
&lt;p&gt;Summary: Titled&lt;/p&gt;
&lt;p&gt;Test Plan:&lt;/p&gt;
&lt;h1&gt;unit test&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;buck2 test 'fbcode//mode/dev-nosan' fbcode//caffe2/test/inductor:split_cat_fx_passes&lt;/code&gt;&lt;br /&gt;
Buck UI: https://www.internalfb.com/buck2/8e4179db-363a-41b5-8bd7-cc445a512f6f&lt;br /&gt;
Test UI: https://www.internalfb.com/intern/testinfra/testrun/15762598708548039&lt;br /&gt;
Network: Up: 91KiB  Down: 32KiB  (reSessionID-b0985d82-1919-49c5-b307-ee0ab49b4738)&lt;br /&gt;
Jobs completed: 28. Time elapsed: 1:27.1s.&lt;br /&gt;
Cache hits: 0%. Commands: 2 (cached: 0, remote: 0, local: 2)&lt;br /&gt;
Tests finished: Pass 11. Fail 0. Fatal 0. Skip 0. Build failure 0&lt;/p&gt;
&lt;h1&gt;local reproduce (IG_CTR)&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;buck2 run mode/opt //scripts/jackiexu0313/pt2:local_model_with_pt2 -- --test_mode split_batch&lt;/code&gt;&lt;br /&gt;
P895047189&lt;/p&gt;
&lt;p&gt;Differential Revision: D51777617&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/115004&lt;br /&gt;
Approved by: https://github.com/jackiexu1992&lt;/p&gt;</description><pubDate>Tue, 20 Feb 2024 11:35:20 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/b33e8d3f6bde3fa1c5ae57eb82d321dbf8f8c24a</guid></item><item><title>[Inductor] Setting kernel launch and exit callbacks for inductor generated triton kernels (#119450)</title><link>https://github.com/pytorch/pytorch/commit/5f3f8fd3c7a3a912a6c7fb1f0a10ebe0b3757757</link><description>&lt;p&gt;[Inductor] Setting kernel launch and exit callbacks for inductor generated triton kernels (#119450)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CompiledKernel.launch_enter_hook&lt;/code&gt; and &lt;code&gt;CompiledKernel.launch_exit_hook&lt;/code&gt; are hooks that allow external tools to monitor the execution of Triton kernels and read each kernel's metadata. Initially, these hooks have a value of &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Triton's kernel launcher passes hooks and kernel metadata by default, while Inductor's launcher doesn't. This PR could unify the parameters passed to both launchers so that tools can get information from both handwritten Triton kernels and Inductor-generated Triton kernels.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119450&lt;br /&gt;
Approved by: https://github.com/soulitzer&lt;/p&gt;</description><pubDate>Tue, 20 Feb 2024 08:58:20 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/5f3f8fd3c7a3a912a6c7fb1f0a10ebe0b3757757</guid></item><item><title>Revert "Fix lint after #119268 (#120207)"</title><link>https://github.com/pytorch/pytorch/commit/f1fbba8f35b8c88c92107f1ecd17281e86c0d199</link><description>&lt;p&gt;Revert "Fix lint after #119268 (#120207)"&lt;/p&gt;
&lt;p&gt;This reverts commit d9d0f1dccc59ce6f0cb150ac236654c24a0d1118.&lt;/p&gt;
&lt;p&gt;Reverted https://github.com/pytorch/pytorch/pull/120207 on behalf of https://github.com/atalman due to Broke inductor tests (&lt;a href="https://github.com/pytorch/pytorch/pull/120207#issuecomment-1953170249"&gt;comment&lt;/a&gt;)&lt;/p&gt;</description><pubDate>Mon, 19 Feb 2024 13:21:12 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/f1fbba8f35b8c88c92107f1ecd17281e86c0d199</guid></item><item><title>[Inductor] Enable the decomposition of quant/dequant per channel (#119177)</title><link>https://github.com/pytorch/pytorch/commit/84de85153972e4384d2f400c20afd4dc799303df</link><description>&lt;p&gt;[Inductor] Enable the decomposition of quant/dequant per channel (#119177)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;br /&gt;
Part 2 of fixing https://github.com/pytorch/pytorch/issues/119141 which needs vectorized code generation of per channel quant and int8 data type.&lt;br /&gt;
Enable decomposition of quant/dequant per channel to make it vectorized code generation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TestPlan&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;python -u -m pytest -s -v test_cpu_repro.py -k test_per_channel_fake_quant_uint8
python -u -m pytest -s -v test_cpu_repro.py -k test_per_channel_fake_quant_int8
python -u -m pytest -s -v test_cpu_repro.py -k test_per_channel_fake_quant_uint8_bf16_input
python -u -m pytest -s -v test_cpu_repro.py -k test_per_channel_fake_quant_int8_bf16_input&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Co-authored-by: Jiong Gong &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#106;&amp;#105;&amp;#111;&amp;#110;&amp;#103;&amp;#46;&amp;#103;&amp;#111;&amp;#110;&amp;#103;&amp;#64;&amp;#105;&amp;#110;&amp;#116;&amp;#101;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#106;&amp;#105;&amp;#111;&amp;#110;&amp;#103;&amp;#46;&amp;#103;&amp;#111;&amp;#110;&amp;#103;&amp;#64;&amp;#105;&amp;#110;&amp;#116;&amp;#101;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;&lt;br /&gt;
Pull Request resolved: https://github.com/pytorch/pytorch/pull/119177&lt;br /&gt;
Approved by: https://github.com/peterbell10, https://github.com/jansel&lt;/p&gt;</description><pubDate>Sun, 18 Feb 2024 17:30:44 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/84de85153972e4384d2f400c20afd4dc799303df</guid></item><item><title>[Inductor] Enable the decomposition of quant/dequant per channel (#119177)</title><link>https://github.com/pytorch/pytorch/commit/84de85153972e4384d2f400c20afd4dc799303df</link><description>&lt;p&gt;[Inductor] Enable the decomposition of quant/dequant per channel (#119177)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;br /&gt;
Part 2 of fixing https://github.com/pytorch/pytorch/issues/119141 which needs vectorized code generation of per channel quant and int8 data type.&lt;br /&gt;
Enable decomposition of quant/dequant per channel to make it vectorized code generation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TestPlan&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;python -u -m pytest -s -v test_cpu_repro.py -k test_per_channel_fake_quant_uint8
python -u -m pytest -s -v test_cpu_repro.py -k test_per_channel_fake_quant_int8
python -u -m pytest -s -v test_cpu_repro.py -k test_per_channel_fake_quant_uint8_bf16_input
python -u -m pytest -s -v test_cpu_repro.py -k test_per_channel_fake_quant_int8_bf16_input&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Co-authored-by: Jiong Gong &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#106;&amp;#105;&amp;#111;&amp;#110;&amp;#103;&amp;#46;&amp;#103;&amp;#111;&amp;#110;&amp;#103;&amp;#64;&amp;#105;&amp;#110;&amp;#116;&amp;#101;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#106;&amp;#105;&amp;#111;&amp;#110;&amp;#103;&amp;#46;&amp;#103;&amp;#111;&amp;#110;&amp;#103;&amp;#64;&amp;#105;&amp;#110;&amp;#116;&amp;#101;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;&lt;br /&gt;
Pull Request resolved: https://github.com/pytorch/pytorch/pull/119177&lt;br /&gt;
Approved by: https://github.com/peterbell10, https://github.com/jansel&lt;/p&gt;</description><pubDate>Sun, 18 Feb 2024 17:30:44 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/84de85153972e4384d2f400c20afd4dc799303df</guid></item><item><title>[inductor] allow padding mm/bmm/addmm in the presence of dynamic dims (#120073)</title><link>https://github.com/pytorch/pytorch/commit/fac598c4aef9eab7a0dabc4e1b21831438c1cecf</link><description>&lt;p&gt;[inductor] allow padding mm/bmm/addmm in the presence of dynamic dims (#120073)&lt;/p&gt;
&lt;p&gt;Previously, pad_mm skips cases where any input tensor has symbolic&lt;br /&gt;
dimension or stride. This is too constraint in practise.&lt;br /&gt;
This PR enables this pass to pad non-symbolic dimensions in&lt;br /&gt;
the presence of dynamic dims. For example, with this PR, we could&lt;br /&gt;
pad the K dimension (i.e. 1921) for torch.mm(A[s0, 1921], B[2048, 1921]).&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/120073&lt;br /&gt;
Approved by: https://github.com/jansel&lt;/p&gt;</description><pubDate>Sat, 17 Feb 2024 04:22:20 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/fac598c4aef9eab7a0dabc4e1b21831438c1cecf</guid></item><item><title>[inductor] Add torch.cond support to JIT Inductor (#119759)</title><link>https://github.com/pytorch/pytorch/commit/badf84bd6bd33c19d1723b64bd72bdb715d3d3b7</link><description>&lt;p&gt;[inductor] Add torch.cond support to JIT Inductor (#119759)&lt;/p&gt;
&lt;p&gt;Summary: &lt;code&gt;torch.cond&lt;/code&gt; is already supported in Dynamo and Export: the &lt;code&gt;true_fn&lt;/code&gt; and &lt;code&gt;false_fn&lt;/code&gt; subgraphs are traced as child fx graphs of the main graph and passed to the &lt;code&gt;torch.cond&lt;/code&gt; higher-order operator in the fx graph. However, this breaks in Inductor, as the latter doesn't have the ways of dealing with child fx subgraphs and properly lowering and codegen-ing them.&lt;/p&gt;
&lt;p&gt;In this PR, we add &lt;code&gt;torch.cond&lt;/code&gt; support in Inductor. This is achieved by adding subgraph lowering and codegen-ing infrastructure as well as new &lt;code&gt;Conditional&lt;/code&gt; IR node type weaving the parent graph with the true and false child subgraphs.&lt;/p&gt;
&lt;p&gt;Here we only implement &lt;code&gt;torch.cond&lt;/code&gt; support in JIT Inductor (Python wrapper codegen). The implementation in AOT Inductor (C++ wrapper codegen), including ABI-compatibility mode, will follow.&lt;/p&gt;
&lt;p&gt;Test Plan:&lt;/p&gt;
&lt;p&gt;```&lt;br /&gt;
$ python test/inductor/test_control_flow.py&lt;br /&gt;
...&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Ran 24 tests in 86.790s&lt;br /&gt;
```&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119759&lt;br /&gt;
Approved by: https://github.com/jansel, https://github.com/eellison&lt;/p&gt;</description><pubDate>Fri, 16 Feb 2024 23:25:27 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/badf84bd6bd33c19d1723b64bd72bdb715d3d3b7</guid></item><item><title>[inductor] logging meta data for inductor generated triton kernel (#120048)</title><link>https://github.com/pytorch/pytorch/commit/36e118b8107cce2dcdcbeae47c4c7048ef9a2296</link><description>&lt;p&gt;[inductor] logging meta data for inductor generated triton kernel (#120048)&lt;/p&gt;
&lt;p&gt;I want to log metadata for inductor generated triton kernels for a couple of purposes&lt;br /&gt;
1. with these metadata, it should be convenient to find unaligned reduction kernels and try the idea here https://github.com/pytorch/pytorch/issues/119929 . I think it's nice to try on kernels that are used in real models&lt;br /&gt;
2. I'm thinking that based on the collected kernel metadata, I can build a simple offline tool by benchmarking each kernel with ncu and augment each kernel metadata with: latency, theoretical membw (estimated memory access / latency), and actually achieved membw. Hopefully this can point us to some good optimization opportunities.&lt;/p&gt;
&lt;p&gt;Command:&lt;br /&gt;
&lt;code&gt;TORCHINDUCTOR_CACHE_DIR=`realpath ~/inductor-caches/kernel-metadata-log` TORCHINDUCTOR_ENABLED_METRIC_TABLES=kernel_metadata TORCHINDUCTOR_BENCHMARK_KERNEL=1 TORCHINDUCTOR_UNIQUE_KERNEL_NAMES=1 time python benchmarks/dynamo/huggingface.py --backend inductor --amp --performance --training&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The best practice here is to point inductor cache to a folder outside of /tmp so that one can always run the kernel again based on the path stored in kernel metadata. (folders under /tmp may get removed by the system)&lt;/p&gt;
&lt;p&gt;Here is first 1000 rows of collected metadata for huggingface: https://gist.github.com/shunting314/cf4ebdaaaa7e852efcaa93524c868e5f&lt;/p&gt;
&lt;p&gt;And here is the total 10K kernels collected for huggingface. The gist can not be rendered as a csv since it's too large: https://gist.github.com/shunting314/7f841528e2debdc2ae05dece4ac591be .&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/120048&lt;br /&gt;
Approved by: https://github.com/jansel&lt;/p&gt;</description><pubDate>Fri, 16 Feb 2024 18:09:27 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/36e118b8107cce2dcdcbeae47c4c7048ef9a2296</guid></item><item><title>Support broadcast in native funcol (#119229)</title><link>https://github.com/pytorch/pytorch/commit/4ac857f94e8900d3e89db5f9119247bfa5ddffb6</link><description>&lt;p&gt;Support broadcast in native funcol (#119229)&lt;/p&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;@LucasLLC recently implemented &lt;code&gt;broadcast&lt;/code&gt; in funcol. This is not yet available in the native funcol ops. This PR adds support for broadcast for native funcol.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Added &lt;code&gt;_c10d_functional::broadcast&lt;/code&gt; and &lt;code&gt;_c10d_functional::broadcast_&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Integrated with python functol broadcast and &lt;code&gt;AsyncCollectiveTensor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Implemented Inductor lowering. Verified correctness and buffer reuse behavior&lt;/li&gt;
&lt;li&gt;Validated dynamo traceability&lt;/li&gt;
&lt;li&gt;Validated AOTInductor compile-ability&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119229&lt;br /&gt;
Approved by: https://github.com/wanchaol&lt;br /&gt;
ghstack dependencies: #119104&lt;/p&gt;</description><pubDate>Fri, 16 Feb 2024 13:01:34 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/4ac857f94e8900d3e89db5f9119247bfa5ddffb6</guid></item><item><title>[aot_inductor] move CppWrapperCodeGen into a separate file (#119871)</title><link>https://github.com/pytorch/pytorch/commit/bc7f3efb0987ed02599a34bd688f04e10a8308a9</link><description>&lt;p&gt;[aot_inductor] move CppWrapperCodeGen into a separate file (#119871)&lt;/p&gt;
&lt;p&gt;This reverts commit d8e319a961bb872027f0abdc413d6beb7502ac9b.&lt;/p&gt;
&lt;p&gt;Differential Revision: &lt;a href="https://our.internmc.facebook.com/intern/diff/D53817853"&gt;D53817853&lt;/a&gt;&lt;br /&gt;
Pull Request resolved: https://github.com/pytorch/pytorch/pull/119871&lt;br /&gt;
Approved by: https://github.com/albanD, https://github.com/khabinov&lt;br /&gt;
ghstack dependencies: #119870&lt;/p&gt;</description><pubDate>Fri, 16 Feb 2024 00:14:20 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/bc7f3efb0987ed02599a34bd688f04e10a8308a9</guid></item><item><title>[aot_inductor] move CudaWrapperCodeGen into a separate file (#119870)</title><link>https://github.com/pytorch/pytorch/commit/78c9b2948ad00b1c853838b95b51e1c4f5a035aa</link><description>&lt;p&gt;[aot_inductor] move CudaWrapperCodeGen into a separate file (#119870)&lt;/p&gt;
&lt;p&gt;This reverts commit 3ab08946d5052eaeda11d683d6a58e801a032755.&lt;/p&gt;
&lt;p&gt;Differential Revision: &lt;a href="https://our.internmc.facebook.com/intern/diff/D53817852"&gt;D53817852&lt;/a&gt;&lt;br /&gt;
Pull Request resolved: https://github.com/pytorch/pytorch/pull/119870&lt;br /&gt;
Approved by: https://github.com/khabinov&lt;/p&gt;</description><pubDate>Fri, 16 Feb 2024 00:10:51 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/78c9b2948ad00b1c853838b95b51e1c4f5a035aa</guid></item><item><title>Add Runtime Constant-Folding function of AOTInductor for AOTInductorModels used internally. (#119823)</title><link>https://github.com/pytorch/pytorch/commit/b8be8b639f21f574e5e2bf90d03691a9f1aad14d</link><description>&lt;p&gt;Add Runtime Constant-Folding function of AOTInductor for AOTInductorModels used internally. (#119823)&lt;/p&gt;
&lt;p&gt;Summary:&lt;br /&gt;
1. Make sure folded constants generated internally doesn't get exposed.&lt;br /&gt;
2. Add runConstantFolding and related API calls&lt;/p&gt;
&lt;p&gt;Test Plan:&lt;br /&gt;
&lt;code&gt;buck2 run mode/opt-split-dwarf -c fbcode.nvcc_arch=v100,a100 caffe2/caffe2/fb/predictor/tests_gpu:pytorch_predictor_container_gpu_test -- --gtest_filter=*PyTorchPredictorContainerTest.LoadAOTInductorModel*&lt;/code&gt;&lt;br /&gt;
The test triggers the added predictor tests &lt;code&gt;test_aot_inductor_merge_net_file_*.predictor_20240206&lt;/code&gt;,&lt;br /&gt;
which would trigger runConstantFolding from predictor's module loading.&lt;/p&gt;
&lt;p&gt;Reviewed By: SherlockNoMad&lt;/p&gt;
&lt;p&gt;Differential Revision: D53718139&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119823&lt;br /&gt;
Approved by: https://github.com/chenyang78&lt;/p&gt;</description><pubDate>Thu, 15 Feb 2024 22:45:48 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/b8be8b639f21f574e5e2bf90d03691a9f1aad14d</guid></item><item><title>Change native funcol inductor tests to use fake pg (#119104)</title><link>https://github.com/pytorch/pytorch/commit/02fb04352275d18529fd10741a0626f0bc3eab5e</link><description>&lt;p&gt;Change native funcol inductor tests to use fake pg (#119104)&lt;/p&gt;
&lt;p&gt;Summary:&lt;br /&gt;
Previously these tests require more than 2 GPUs to run. Changing them to use fake pg so they can run more often.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119104&lt;br /&gt;
Approved by: https://github.com/wconstab&lt;br /&gt;
ghstack dependencies: #119103&lt;/p&gt;</description><pubDate>Thu, 15 Feb 2024 21:18:45 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/02fb04352275d18529fd10741a0626f0bc3eab5e</guid></item><item><title>[inductor][eazy] fix profiler (#119959)</title><link>https://github.com/pytorch/pytorch/commit/3f4f91f2eb7d878c138c688aa2f27853a1cbc5de</link><description>&lt;p&gt;[inductor][eazy] fix profiler (#119959)&lt;/p&gt;
&lt;p&gt;print_performance previously returns the execution time for &lt;code&gt;times&lt;/code&gt; runs in total but now it returns the average execution time of a single run.  Change the profiler to be consistent with that. Not sure if there is a good way to add test though.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119959&lt;br /&gt;
Approved by: https://github.com/eellison&lt;/p&gt;</description><pubDate>Thu, 15 Feb 2024 13:47:09 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/3f4f91f2eb7d878c138c688aa2f27853a1cbc5de</guid></item><item><title>[export] Log private api uses. (#119848)</title><link>https://github.com/pytorch/pytorch/commit/8f27fde2f54eb3a93f20360fe0707b5c729ddf93</link><description>&lt;p&gt;[export] Log private api uses. (#119848)&lt;/p&gt;
&lt;p&gt;Summary:&lt;br /&gt;
as title.&lt;br /&gt;
The following APIs are logged:&lt;br /&gt;
- capture_preautograd_graph&lt;br /&gt;
- torch._export.aot_compile&lt;br /&gt;
- external usage of _export_to_torch_ir (AOTInductor, Pippy)&lt;br /&gt;
- constraints API&lt;br /&gt;
- public use of torch._dynamo.export&lt;/p&gt;
&lt;p&gt;Test Plan: CI&lt;/p&gt;
&lt;p&gt;Differential Revision: D53735599&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119848&lt;br /&gt;
Approved by: https://github.com/suo&lt;/p&gt;</description><pubDate>Wed, 14 Feb 2024 14:58:23 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/8f27fde2f54eb3a93f20360fe0707b5c729ddf93</guid></item><item><title>Revert "[Inductor] Setting kernel launch and exit callbacks for inductor generated triton kernels (#119450)"</title><link>https://github.com/pytorch/pytorch/commit/3713103db48183fe323ea15e6e0fdb0603e495b7</link><description>&lt;p&gt;Revert "[Inductor] Setting kernel launch and exit callbacks for inductor generated triton kernels (#119450)"&lt;/p&gt;
&lt;p&gt;This reverts commit 4e93b00b692118b8531f3807ec95eb4c538ea419.&lt;/p&gt;
&lt;p&gt;Reverted https://github.com/pytorch/pytorch/pull/119450 on behalf of https://github.com/soulitzer due to Regressed perf on the dashboard (&lt;a href="https://github.com/pytorch/pytorch/pull/119450#issuecomment-1944876761"&gt;comment&lt;/a&gt;)&lt;/p&gt;</description><pubDate>Wed, 14 Feb 2024 14:44:21 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/3713103db48183fe323ea15e6e0fdb0603e495b7</guid></item><item><title>[inductor][scheduler] Use set for origin (#119861)</title><link>https://github.com/pytorch/pytorch/commit/6b04251b87952a349f2e7e579d8322bcf0496e6a</link><description>&lt;p&gt;[inductor][scheduler] Use set for origin (#119861)&lt;/p&gt;
&lt;p&gt;xref - https://github.com/pytorch/pytorch/issues/119440&lt;/p&gt;
&lt;p&gt;This avoids node &amp;gt; node comparison if the origin order is same in the origins tuple. However, I am unable to come up with a test case where this could happen.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119861&lt;br /&gt;
Approved by: https://github.com/Skylion007, https://github.com/eellison&lt;/p&gt;</description><pubDate>Wed, 14 Feb 2024 14:00:38 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/6b04251b87952a349f2e7e579d8322bcf0496e6a</guid></item><item><title>[testing][inductor] Allow grad tolerance override (#119844)</title><link>https://github.com/pytorch/pytorch/commit/7797a8c2cbe153d3f654ec56c7bac0a1cece753f</link><description>&lt;p&gt;[testing][inductor] Allow grad tolerance override (#119844)&lt;/p&gt;
&lt;p&gt;Introduce &lt;code&gt;grad_atol&lt;/code&gt; and &lt;code&gt;grad_rtol&lt;/code&gt; kwargs, default behavior is&lt;br /&gt;
preserved by using &lt;code&gt;atol&lt;/code&gt; and &lt;code&gt;rtol&lt;/code&gt; values.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119844&lt;br /&gt;
Approved by: https://github.com/peterbell10&lt;/p&gt;</description><pubDate>Wed, 14 Feb 2024 12:18:48 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/7797a8c2cbe153d3f654ec56c7bac0a1cece753f</guid></item><item><title>[ROCm] Initial ir.Scan/aten.cumsum lowering support on ROCm (#119369)</title><link>https://github.com/pytorch/pytorch/commit/3e21c785a4be06a75791bcae5179f830cc62d557</link><description>&lt;p&gt;[ROCm] Initial ir.Scan/aten.cumsum lowering support on ROCm (#119369)&lt;/p&gt;
&lt;p&gt;It was noted in https://github.com/pytorch/pytorch/pull/117992 that ROCm is still falling back to eager with scan's with inductor.&lt;/p&gt;
&lt;p&gt;Initially as part of https://github.com/pytorch/pytorch/pull/106581 ROCm was disabled on this feature due to lack of triton support.&lt;/p&gt;
&lt;p&gt;This PR will enable support for lowering scan operations on ROCm.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119369&lt;br /&gt;
Approved by: https://github.com/peterbell10&lt;/p&gt;</description><pubDate>Wed, 14 Feb 2024 08:13:46 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/3e21c785a4be06a75791bcae5179f830cc62d557</guid></item><item><title>[inductor] Reorder if check to avoid more expensive check. (#119817)</title><link>https://github.com/pytorch/pytorch/commit/fb492f7ca14ee429a522589f9c71da53f56fc323</link><description>&lt;p&gt;[inductor] Reorder if check to avoid more expensive check. (#119817)&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;mkldnn&lt;/code&gt; is not enabled or not available there is no point in performing a relatively expensive &lt;code&gt;all&lt;/code&gt; check.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119817&lt;br /&gt;
Approved by: https://github.com/Skylion007&lt;/p&gt;</description><pubDate>Wed, 14 Feb 2024 08:04:31 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/fb492f7ca14ee429a522589f9c71da53f56fc323</guid></item><item><title>[inductor] Replace generators with map. (#119818)</title><link>https://github.com/pytorch/pytorch/commit/184605ae7d97f0425d3ad853ecff482995206dd2</link><description>&lt;p&gt;[inductor] Replace generators with map. (#119818)&lt;/p&gt;
&lt;p&gt;It's more concise and efficient.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119818&lt;br /&gt;
Approved by: https://github.com/Skylion007, https://github.com/Neilblaze&lt;/p&gt;</description><pubDate>Wed, 14 Feb 2024 08:02:52 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/184605ae7d97f0425d3ad853ecff482995206dd2</guid></item><item><title>[inductor] Recursivly unwrap_storage_for_input when convert_to_reinterpret_view fails (#119867)</title><link>https://github.com/pytorch/pytorch/commit/4a50572c924214e32b093ba5fb8270675abb20bf</link><description>&lt;p&gt;[inductor] Recursivly unwrap_storage_for_input when convert_to_reinterpret_view fails (#119867)&lt;/p&gt;
&lt;p&gt;Summary:&lt;br /&gt;
When, during &lt;code&gt;ExternKernel.realize_input&lt;/code&gt; call, underlying &lt;code&gt;ExternKernel.convert_to_reinterpret_view&lt;/code&gt; fails, we currently fall back to &lt;code&gt;cls.copy_input&lt;/code&gt; here:&lt;/p&gt;
&lt;p&gt;https://github.com/pytorch/pytorch/blob/31e59766e7e7b51e8dddd4a6967891ac01f4d37b/torch/_inductor/ir.py#L3805-L3816&lt;/p&gt;
&lt;p&gt;This creates a &lt;code&gt;TensorBox(StorageBox(...))&lt;/code&gt; wrapped output, which causes a problem for this assertion:&lt;/p&gt;
&lt;p&gt;https://github.com/pytorch/pytorch/blob/31e59766e7e7b51e8dddd4a6967891ac01f4d37b/torch/_inductor/ir.py#L3479&lt;/p&gt;
&lt;p&gt;Here we add a special case handling for this to unwrap &lt;code&gt;x&lt;/code&gt; recursively.&lt;/p&gt;
&lt;p&gt;Test Plan:&lt;br /&gt;
This local repro:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;torch.compile()
def f(a, b, mat1, mat2):
    bias = torch.bmm(a + 3.14, b).permute(0, 2, 1).reshape(3992, -1)
    return torch.addmm(bias, mat1, mat2)
f(
    torch.randn(3992, 20, 40).cuda(),
    torch.randn(3992, 40, 192).cuda(),
    torch.empty(3992, 1024).cuda(),
    torch.empty(1024, 3840).cuda(),
)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;with this line:&lt;/p&gt;
&lt;p&gt;https://github.com/pytorch/pytorch/blob/690f54b0f5fa911ba9f7cb6f2ef9719ec765d2d2/torch/_inductor/fx_passes/post_grad.py#L650&lt;/p&gt;
&lt;p&gt;changed to &lt;code&gt;if cond(*args, **kwargs):&lt;/code&gt; fails before and succeeds after this PR.&lt;/p&gt;
&lt;p&gt;Differential Revision: D53743146&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119867&lt;br /&gt;
Approved by: https://github.com/xw285cornell&lt;/p&gt;</description><pubDate>Tue, 13 Feb 2024 23:50:34 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/4a50572c924214e32b093ba5fb8270675abb20bf</guid></item><item><title>[inductor] Use torch.cuda.clock_rate instead of triton.testing.nvsmi (#118662)</title><link>https://github.com/pytorch/pytorch/commit/563f1b9fef052d346249917101d440d5fc11c704</link><description>&lt;p&gt;[inductor] Use torch.cuda.clock_rate instead of triton.testing.nvsmi (#118662)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;triton.testing.nvsmi&lt;/code&gt; invokes &lt;code&gt;nvidia-smi&lt;/code&gt; as a subprocess, and Meta&lt;br /&gt;
prod usually doesn't make nvidia-smi available.  Might as well just use&lt;br /&gt;
something that's native to torch.&lt;/p&gt;
&lt;p&gt;Differential Revision: &lt;a href="https://our.internmc.facebook.com/intern/diff/D53235814/"&gt;D53235814&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118662&lt;br /&gt;
Approved by: https://github.com/jansel&lt;/p&gt;</description><pubDate>Tue, 13 Feb 2024 19:23:49 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/563f1b9fef052d346249917101d440d5fc11c704</guid></item><item><title>[inductor] Support storage resizing (#119749)</title><link>https://github.com/pytorch/pytorch/commit/75a6d6aef7e5cbc2aa515183916ee97d8e914d43</link><description>&lt;p&gt;[inductor] Support storage resizing (#119749)&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119749&lt;br /&gt;
Approved by: https://github.com/yf225&lt;br /&gt;
ghstack dependencies: #119647, #119671&lt;/p&gt;</description><pubDate>Tue, 13 Feb 2024 19:03:38 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/75a6d6aef7e5cbc2aa515183916ee97d8e914d43</guid></item><item><title>Rewrite group_batch_fusion.find_independent_subset_greedy() to be iterative. (#118324)</title><link>https://github.com/pytorch/pytorch/commit/e9b78f2db0784fadcc09150f64f54d233993ee6e</link><description>&lt;p&gt;Rewrite group_batch_fusion.find_independent_subset_greedy() to be iterative. (#118324)&lt;/p&gt;
&lt;p&gt;Improve performance of inductor searching large graphs for potential fusions.&lt;br /&gt;
Also adds some direct unit tests of find_independent_subset_greedy() to ensure that the rewrite didn't break behavior.&lt;/p&gt;
&lt;p&gt;Fixes #98467&lt;/p&gt;
&lt;p&gt;Previously find_independent_subset_greedy() was recursive and the example from the issue would cause it to blow out the stack. This changes it to be iterative and also caches some of the computed dependencies (it can't cache all of them because the caller is allowed to change the graph during the iteration).&lt;/p&gt;
&lt;p&gt;Fusion is still slow - but at least finishes.&lt;/p&gt;
&lt;p&gt;After this change the example given in #98467 has the following backend timings (on one particular CPU):&lt;br /&gt;
eager timing: 3m:23s&lt;br /&gt;
aot_eager timing: 4m:12s&lt;br /&gt;
inductor timing: 22m:24s&lt;/p&gt;
&lt;p&gt;Possible future work to improve this further:&lt;br /&gt;
1. In dynamo limit the amount of inlining allowed before falling back to a graph break. This test ends up tracing through 483k bytecodes generating the graph.&lt;br /&gt;
2. In inductor have a limit so we don't exhaustively search the graph for fusion possibilities.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118324&lt;br /&gt;
Approved by: https://github.com/oulgen&lt;/p&gt;</description><pubDate>Tue, 13 Feb 2024 14:54:53 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/e9b78f2db0784fadcc09150f64f54d233993ee6e</guid></item><item><title>Fixed FxGraphDrawer compat constructor (#119767)</title><link>https://github.com/pytorch/pytorch/commit/8ec3d8e35faa8b37a0f6639dc56fe0c444d2ca48</link><description>&lt;p&gt;Fixed FxGraphDrawer compat constructor (#119767)&lt;/p&gt;
&lt;p&gt;Match FxGraphDrawer compat constructor signature to avoid the following failure when &lt;code&gt;pydot&lt;/code&gt; is not installed:&lt;br /&gt;
&lt;code&gt;File "/pytorch/torch/_functorch/partitioners.py", line 933, in draw_graph
    g = graph_drawer.FxGraphDrawer(
torch._dynamo.exc.BackendCompilerFailed: backend='inductor' raised:
TypeError: __init__() got an unexpected keyword argument 'dot_graph_shape'&lt;/code&gt;&lt;br /&gt;
Pull Request resolved: https://github.com/pytorch/pytorch/pull/119767&lt;br /&gt;
Approved by: https://github.com/eellison&lt;/p&gt;</description><pubDate>Tue, 13 Feb 2024 11:36:01 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/8ec3d8e35faa8b37a0f6639dc56fe0c444d2ca48</guid></item><item><title>[dynamo] Capture untyped_storage().resize_() (#119647)</title><link>https://github.com/pytorch/pytorch/commit/39c68efd851efc1cf5c5321b8f8f8e298019e274</link><description>&lt;p&gt;[dynamo] Capture untyped_storage().resize_() (#119647)&lt;/p&gt;
&lt;p&gt;This makes storage resizing work with &lt;code&gt;backend=eager&lt;/code&gt;, the next two PRs make it work for inductor.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119647&lt;br /&gt;
Approved by: https://github.com/yf225&lt;/p&gt;</description><pubDate>Tue, 13 Feb 2024 11:03:28 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/39c68efd851efc1cf5c5321b8f8f8e298019e274</guid></item><item><title>[inductor] Refactor device guard Python codegen to allow nested indentation (#119673)</title><link>https://github.com/pytorch/pytorch/commit/c2a835d71023359d3fcf3657298413f2c36f93ed</link><description>&lt;p&gt;[inductor] Refactor device guard Python codegen to allow nested indentation (#119673)&lt;/p&gt;
&lt;p&gt;Summary: The codegen of &lt;code&gt;with torch.cuda._DeviceGuard&lt;/code&gt; context manager in the Python wrapper code is implemented via &lt;code&gt;device_cm_stack: contextlib.ExitStack()&lt;/code&gt;. As the context managers in the stack are &lt;code&gt;code.indent()&lt;/code&gt;, this means that the whole stack is unindented at once on &lt;code&gt;device_cm_stack.close()&lt;/code&gt;. This becomes problematic when attempting to codegen indented code (e.g., for control flow in Python and / or nested subgraph codegen-ing).&lt;/p&gt;
&lt;p&gt;In this PR, we refactor the device guard codegen-ing in Python by replacing the &lt;code&gt;device_cm_stack&lt;/code&gt; by explicit indent and unindent calls for entering and exiting the &lt;code&gt;with torch.cuda._DeviceGuard&lt;/code&gt; context manager. This allows for nested device guard context managers and better aligns with other indented codegen-ing intertwined with it (e.g., for nested subgraph codegen-ing).&lt;/p&gt;
&lt;p&gt;This is necessary for the upcoming support for &lt;code&gt;torch.cond&lt;/code&gt; (and other control flow operators) in Inductor. Before that, the only change in the Python wrapper codegen is that the &lt;code&gt;return outputs&lt;/code&gt; is now happening outside the &lt;code&gt;with torch.cuda._DeviceGuard&lt;/code&gt; context manager.&lt;/p&gt;
&lt;p&gt;Test Plan: CI&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119673&lt;br /&gt;
Approved by: https://github.com/peterbell10&lt;/p&gt;</description><pubDate>Tue, 13 Feb 2024 07:05:30 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/c2a835d71023359d3fcf3657298413f2c36f93ed</guid></item><item><title>Restore OpInfo/ModuleInfo tests in Inductor-wrapped tests (#119693)</title><link>https://github.com/pytorch/pytorch/commit/b3df3e4e941defbd73dd998fa48ba283f6644d5d</link><description>&lt;p&gt;Restore OpInfo/ModuleInfo tests in Inductor-wrapped tests (#119693)&lt;/p&gt;
&lt;p&gt;I accidentally disabled this without realizing it. It turns out that&lt;br /&gt;
PYTORCH_TEST_WITH_INDUCTOR=1 implies PYTORCH_TEST_WITH_DYNAMO=1, which&lt;br /&gt;
activates skipIfTorchDynamo decorators.&lt;/p&gt;
&lt;p&gt;Test Plan:&lt;br /&gt;
- wait for CI&lt;br /&gt;
Pull Request resolved: https://github.com/pytorch/pytorch/pull/119693&lt;br /&gt;
Approved by: https://github.com/bdhirsh&lt;/p&gt;</description><pubDate>Mon, 12 Feb 2024 14:44:45 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/b3df3e4e941defbd73dd998fa48ba283f6644d5d</guid></item><item><title>[inductor] Update JIT Inductor cpp wrapper entry function signature (#119280)</title><link>https://github.com/pytorch/pytorch/commit/70c93c6097484652dbef079e31d08cd72490980f</link><description>&lt;p&gt;[inductor] Update JIT Inductor cpp wrapper entry function signature (#119280)&lt;/p&gt;
&lt;p&gt;Summary: Change JIT Inductor cpp wrapper entry function to use similar signature as AOTInductor, i.e. using an array of AtenTensorHandle instead of a vector of at::Tensor as the inputs and return output through a pointer. This makes it easier to consolidate the ABI compatible and non-compatible modes.&lt;/p&gt;
&lt;p&gt;Differential Revision: &lt;a href="https://our.internmc.facebook.com/intern/diff/D53478825"&gt;D53478825&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119280&lt;br /&gt;
Approved by: https://github.com/chenyang78&lt;/p&gt;</description><pubDate>Mon, 12 Feb 2024 14:24:35 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/70c93c6097484652dbef079e31d08cd72490980f</guid></item><item><title>[reland] Fix estimate_nccl_collective_runtime (#118986)</title><link>https://github.com/pytorch/pytorch/commit/27ffede8784e43df4ed43ce37f86dbffb5b05f49</link><description>&lt;p&gt;[reland] Fix estimate_nccl_collective_runtime (#118986)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;estimate_nccl_collective_runtime&lt;/code&gt; has been broken and the errors have been silently swallowed by inductor. This PR:&lt;br /&gt;
- Fixes the issues described in https://github.com/pytorch/pytorch/issues/118497.&lt;br /&gt;
- Adds white-box testing so future issues can be surfaced in tests.&lt;br /&gt;
- Add support for native funcol IRs.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118986&lt;br /&gt;
Approved by: https://github.com/yf225&lt;br /&gt;
ghstack dependencies: #119102&lt;/p&gt;</description><pubDate>Mon, 12 Feb 2024 10:48:06 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/27ffede8784e43df4ed43ce37f86dbffb5b05f49</guid></item><item><title>Decompose torch.ops.higher_order.auto_functionalized in Inductor (#118673)</title><link>https://github.com/pytorch/pytorch/commit/cf474a09f56ffa707f062ed4f042cdcbedc82093</link><description>&lt;p&gt;Decompose torch.ops.higher_order.auto_functionalized in Inductor (#118673)&lt;/p&gt;
&lt;p&gt;We'd like to get auto_functionalized to work with AOTInductor. To get&lt;br /&gt;
there, we decompose &lt;code&gt;output = auto_functionalized(inplace_op, ...)&lt;/code&gt; into its&lt;br /&gt;
corresponding aten ops (clones + inplace_op) before the Inductor lowering phase.&lt;/p&gt;
&lt;p&gt;This decomposition must happen at the end of the Inductor FX passes&lt;br /&gt;
because it introduces in-place operations.&lt;/p&gt;
&lt;p&gt;The pattern matcher's "replace this single node with multiple nodes" API&lt;br /&gt;
isn't robust enough here. The problem is that &lt;code&gt;auto_functionalized&lt;/code&gt;&lt;br /&gt;
returns a single output (this output is a List), but the decomposition&lt;br /&gt;
ends up returning the unpacked List (e.g. it may return two tensors).&lt;br /&gt;
Previously, there was an assertion that this was not the case; I fixed&lt;br /&gt;
up &lt;code&gt;replace_with_graph&lt;/code&gt; to handle this.&lt;/p&gt;
&lt;p&gt;Future: Not all of the clones are necessary (e.g. if the input's last&lt;br /&gt;
usage is this operator, then we don't need to clone it). We can add this&lt;br /&gt;
logic later.&lt;/p&gt;
&lt;p&gt;Test Plan:&lt;br /&gt;
- existing tests&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118673&lt;br /&gt;
Approved by: https://github.com/oulgen&lt;/p&gt;</description><pubDate>Mon, 12 Feb 2024 09:30:01 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/cf474a09f56ffa707f062ed4f042cdcbedc82093</guid></item><item><title>[AOTI][refactor] Move ThreadLocalCachedOutputTensor into a separate header (#119392)</title><link>https://github.com/pytorch/pytorch/commit/52a3de6cbf31504f63b034746fae7b6d3828ca6a</link><description>&lt;p&gt;[AOTI][refactor] Move ThreadLocalCachedOutputTensor into a separate header (#119392)&lt;/p&gt;
&lt;p&gt;Summary: Move common functionality into a separate header so that later JIT and AOT Inductor can share it.&lt;/p&gt;
&lt;p&gt;Test Plan: CI&lt;/p&gt;
&lt;p&gt;Differential Revision: D53523452&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119392&lt;br /&gt;
Approved by: https://github.com/khabinov&lt;/p&gt;</description><pubDate>Mon, 12 Feb 2024 07:56:16 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/52a3de6cbf31504f63b034746fae7b6d3828ca6a</guid></item><item><title>[inductor] Update the compile options for CppPythonBindingsCodeCache (#119415)</title><link>https://github.com/pytorch/pytorch/commit/663dd5d0066664c29e2ecede7ec70bcf71e25133</link><description>&lt;p&gt;[inductor] Update the compile options for CppPythonBindingsCodeCache (#119415)&lt;/p&gt;
&lt;p&gt;Differential Revision: &lt;a href="https://our.internmc.facebook.com/intern/diff/D53554681"&gt;D53554681&lt;/a&gt;&lt;br /&gt;
Pull Request resolved: https://github.com/pytorch/pytorch/pull/119415&lt;br /&gt;
Approved by: https://github.com/jansel, https://github.com/khabinov&lt;/p&gt;</description><pubDate>Sun, 11 Feb 2024 13:25:34 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/663dd5d0066664c29e2ecede7ec70bcf71e25133</guid></item><item><title>Check alignment of ReinterpretView args of custom Triton kernels (#119649)</title><link>https://github.com/pytorch/pytorch/commit/e5f46a1d359a91b5b80a749ab8c01450ec6d2961</link><description>&lt;p&gt;Check alignment of ReinterpretView args of custom Triton kernels (#119649)&lt;/p&gt;
&lt;p&gt;Summary: Currently, when a custom (user-written) Triton kernel has a ReinterpretView argument in IR, we're always skipping the alignment checking for this argument when preparing the &lt;code&gt;signature_of&lt;/code&gt; for the AOT compilation of the Triton kernel (via setting &lt;code&gt;TensorArg.check_alignment&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt;). This is problematic for user-written kernels where, albeit reinterpreted, the argument of the Triton kernel (the data pointer) can still be aligned to 16. When we skip alignment checking, the performance of the AOT-compiled internal Triton kernels can degrade 2x--3x.&lt;/p&gt;
&lt;p&gt;In this PR, we replace &lt;code&gt;TensorArg.check_alignment&lt;/code&gt; by &lt;code&gt;TensorArg.offset&lt;/code&gt;, in which we specify the offset of the &lt;code&gt;ReinterpretView.layout&lt;/code&gt; relative to the underlying &lt;code&gt;ir.Buffer&lt;/code&gt; (corresponding to the data pointer before reinterpretation). As the size and stride of the layout don't change the alignment properties, those can be skipped. Importantly, for &lt;code&gt;ReinterpretView&lt;/code&gt; arguments of custom Triton kernels, we use &lt;code&gt;arg.data.get_name()&lt;/code&gt; as the buffer name. That, together with the offset, is used to check the alignment.&lt;/p&gt;
&lt;p&gt;Bonus: the namedtuples in &lt;code&gt;codegen/common.py&lt;/code&gt; are refactored as &lt;code&gt;dataclass&lt;/code&gt;es, with nicer type hints and default values (for the newly added &lt;code&gt;TensorArg.offset&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Test Plan:&lt;/p&gt;
&lt;p&gt;```&lt;br /&gt;
$ python test/inductor/test_aot_inductor.py -k test_triton_kernel_reinterpret_view&lt;br /&gt;
...&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Ran 6 tests in 27.952s&lt;/p&gt;
&lt;p&gt;OK (skipped=4)&lt;br /&gt;
```&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119649&lt;br /&gt;
Approved by: https://github.com/oulgen&lt;/p&gt;</description><pubDate>Sun, 11 Feb 2024 12:21:17 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/e5f46a1d359a91b5b80a749ab8c01450ec6d2961</guid></item><item><title>[inductor] Use list comprehension to initialize unused_views. (#119618)</title><link>https://github.com/pytorch/pytorch/commit/4394e0dc2c992b9a8b47e469e18d338be816e1f2</link><description>&lt;p&gt;[inductor] Use list comprehension to initialize unused_views. (#119618)&lt;/p&gt;
&lt;p&gt;It's more idiomatic and efficient.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119618&lt;br /&gt;
Approved by: https://github.com/Skylion007&lt;/p&gt;</description><pubDate>Sun, 11 Feb 2024 10:57:18 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/4394e0dc2c992b9a8b47e469e18d338be816e1f2</guid></item><item><title>Don't skip register-spilling configs in custom Triton kernel auto-tuning (#119634)</title><link>https://github.com/pytorch/pytorch/commit/0bed0501fa21baa587a66fea5ce3c3df9b1036a2</link><description>&lt;p&gt;Don't skip register-spilling configs in custom Triton kernel auto-tuning (#119634)&lt;/p&gt;
&lt;p&gt;Summary: There has been some empirical evidence that, for (non-trivial) custom (user-written) Triton kernels, a register-spilling config yields the best result in auto-tuning. For this reason, we don't skip register-spilling config from auto-tuning of the custom Triton kernels.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;An example of auto-tuning result with the register-spilling config outperforming others&lt;/summary&gt;

```
BLOCK_M: 16, BLOCK_N: 16, num_warps: 2, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 0.748896, nreg 255, nspill 0, #shared-mem 8704
BLOCK_M: 16, BLOCK_N: 16, num_warps: 4, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 1.723424, nreg 249, nspill 0, #shared-mem 8704
BLOCK_M: 16, BLOCK_N: 16, num_warps: 8, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 2.202656, nreg 190, nspill 0, #shared-mem 8704
BLOCK_M: 16, BLOCK_N: 16, num_warps: 2, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 0.748256, nreg 255, nspill 0, #shared-mem 8704
BLOCK_M: 16, BLOCK_N: 16, num_warps: 4, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 1.724896, nreg 249, nspill 0, #shared-mem 8704
BLOCK_M: 16, BLOCK_N: 16, num_warps: 8, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 2.201632, nreg 190, nspill 0, #shared-mem 8704
BLOCK_M: 16, BLOCK_N: 32, num_warps: 2, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 0.651664, nreg 255, nspill 56, #shared-mem 13312
BLOCK_M: 16, BLOCK_N: 32, num_warps: 4, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 0.846368, nreg 255, nspill 14, #shared-mem 13312
BLOCK_M: 16, BLOCK_N: 32, num_warps: 8, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 1.841792, nreg 243, nspill 0, #shared-mem 13312
BLOCK_M: 16, BLOCK_N: 32, num_warps: 2, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 0.651584, nreg 255, nspill 56, #shared-mem 13312
BLOCK_M: 16, BLOCK_N: 32, num_warps: 4, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 0.846432, nreg 255, nspill 14, #shared-mem 13312
BLOCK_M: 16, BLOCK_N: 32, num_warps: 8, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 1.841904, nreg 243, nspill 0, #shared-mem 13312
BLOCK_M: 16, BLOCK_N: 64, num_warps: 2, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 1.236448, nreg 255, nspill 254, #shared-mem 22528
BLOCK_M: 16, BLOCK_N: 64, num_warps: 4, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 1.484384, nreg 255, nspill 174, #shared-mem 22528
BLOCK_M: 16, BLOCK_N: 64, num_warps: 8, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 1.131168, nreg 255, nspill 6, #shared-mem 22528
BLOCK_M: 16, BLOCK_N: 64, num_warps: 2, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 1.236544, nreg 255, nspill 254, #shared-mem 22528
BLOCK_M: 16, BLOCK_N: 64, num_warps: 4, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 1.483648, nreg 255, nspill 174, #shared-mem 22528
BLOCK_M: 16, BLOCK_N: 64, num_warps: 8, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 1.131408, nreg 255, nspill 6, #shared-mem 22528
BLOCK_M: 32, BLOCK_N: 16, num_warps: 2, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 0.516112, nreg 255, nspill 28, #shared-mem 13312
BLOCK_M: 32, BLOCK_N: 16, num_warps: 4, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 0.737792, nreg 255, nspill 0, #shared-mem 13312
BLOCK_M: 32, BLOCK_N: 16, num_warps: 8, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 1.411632, nreg 193, nspill 0, #shared-mem 13312
BLOCK_M: 32, BLOCK_N: 16, num_warps: 2, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 0.515904, nreg 255, nspill 28, #shared-mem 13312
BLOCK_M: 32, BLOCK_N: 16, num_warps: 4, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 0.736608, nreg 255, nspill 0, #shared-mem 13312
BLOCK_M: 32, BLOCK_N: 16, num_warps: 8, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 1.409808, nreg 193, nspill 0, #shared-mem 13312
BLOCK_M: 32, BLOCK_N: 32, num_warps: 2, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 0.553536, nreg 255, nspill 130, #shared-mem 18432
BLOCK_M: 32, BLOCK_N: 32, num_warps: 4, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 0.569792, nreg 255, nspill 56, #shared-mem 18432
BLOCK_M: 32, BLOCK_N: 32, num_warps: 8, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 0.892448, nreg 255, nspill 4, #shared-mem 18432
BLOCK_M: 32, BLOCK_N: 32, num_warps: 2, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 0.553584, nreg 255, nspill 130, #shared-mem 18432
BLOCK_M: 32, BLOCK_N: 32, num_warps: 4, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 0.569568, nreg 255, nspill 56, #shared-mem 18432
BLOCK_M: 32, BLOCK_N: 32, num_warps: 8, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 0.892240, nreg 255, nspill 4, #shared-mem 18432
BLOCK_M: 32, BLOCK_N: 64, num_warps: 2, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 1.332928, nreg 255, nspill 366, #shared-mem 28672
BLOCK_M: 32, BLOCK_N: 64, num_warps: 4, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 0.922256, nreg 255, nspill 228, #shared-mem 28672
BLOCK_M: 32, BLOCK_N: 64, num_warps: 8, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 0.758400, nreg 255, nspill 26, #shared-mem 28672
BLOCK_M: 32, BLOCK_N: 64, num_warps: 2, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 1.333440, nreg 255, nspill 366, #shared-mem 28672
BLOCK_M: 32, BLOCK_N: 64, num_warps: 4, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 0.922336, nreg 255, nspill 228, #shared-mem 28672
BLOCK_M: 32, BLOCK_N: 64, num_warps: 8, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 0.758496, nreg 255, nspill 26, #shared-mem 28672
BLOCK_M: 64, BLOCK_N: 16, num_warps: 2, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 1.231648, nreg 255, nspill 292, #shared-mem 22528
BLOCK_M: 64, BLOCK_N: 16, num_warps: 4, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 0.639424, nreg 255, nspill 90, #shared-mem 22528
BLOCK_M: 64, BLOCK_N: 16, num_warps: 8, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 0.917952, nreg 240, nspill 0, #shared-mem 22528
BLOCK_M: 64, BLOCK_N: 16, num_warps: 2, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 1.230624, nreg 255, nspill 292, #shared-mem 22528
BLOCK_M: 64, BLOCK_N: 16, num_warps: 4, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 0.639168, nreg 255, nspill 90, #shared-mem 22528
BLOCK_M: 64, BLOCK_N: 16, num_warps: 8, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 0.917440, nreg 240, nspill 0, #shared-mem 22528
BLOCK_M: 64, BLOCK_N: 32, num_warps: 2, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 0.838080, nreg 255, nspill 354, #shared-mem 28672
BLOCK_M: 64, BLOCK_N: 32, num_warps: 4, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 0.569184, nreg 255, nspill 178, #shared-mem 28672
BLOCK_M: 64, BLOCK_N: 32, num_warps: 8, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 0.614720, nreg 255, nspill 28, #shared-mem 28672
BLOCK_M: 64, BLOCK_N: 32, num_warps: 2, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 0.838048, nreg 255, nspill 354, #shared-mem 28672
BLOCK_M: 64, BLOCK_N: 32, num_warps: 4, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 0.569472, nreg 255, nspill 178, #shared-mem 28672
BLOCK_M: 64, BLOCK_N: 32, num_warps: 8, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 0.615104, nreg 255, nspill 28, #shared-mem 28672
BLOCK_M: 64, BLOCK_N: 64, num_warps: 2, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 1.012128, nreg 255, nspill 522, #shared-mem 40960
BLOCK_M: 64, BLOCK_N: 64, num_warps: 4, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 0.861536, nreg 255, nspill 378, #shared-mem 40960
BLOCK_M: 64, BLOCK_N: 64, num_warps: 8, num_ctas: 1, num_stages: 1, enable_warp_specialization: False, enable_persistent: False: 0.771584, nreg 255, nspill 134, #shared-mem 40960
BLOCK_M: 64, BLOCK_N: 64, num_warps: 2, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 1.012512, nreg 255, nspill 522, #shared-mem 40960
BLOCK_M: 64, BLOCK_N: 64, num_warps: 4, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 0.861024, nreg 255, nspill 378, #shared-mem 40960
BLOCK_M: 64, BLOCK_N: 64, num_warps: 8, num_ctas: 1, num_stages: 2, enable_warp_specialization: False, enable_persistent: False: 0.771712, nreg 255, nspill 134, #shared-mem 40960
```

&lt;/details&gt;

&lt;p&gt;In the above, the winning config is &lt;code&gt;BLOCK_M: 32, BLOCK_N: 16, num_warps: 2, num_ctas: 1, num_stages: 2&lt;/code&gt;, although it has non-zero &lt;code&gt;nspill 28&lt;/code&gt;. This is an example where we need to consider all configs, including the register-spilling ones, to obtain the best result from auto-tuning.&lt;/p&gt;
&lt;p&gt;In the worst case, this will just make auto-tuning longer, but can't regress the results. And, as the number of custom Triton kernels in the model is normally much smaller than the number of Inductor-generated ones, this should be acceptable.&lt;/p&gt;
&lt;p&gt;Test Plan: CI&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119634&lt;br /&gt;
Approved by: https://github.com/oulgen&lt;/p&gt;</description><pubDate>Sat, 10 Feb 2024 18:13:25 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/0bed0501fa21baa587a66fea5ce3c3df9b1036a2</guid></item><item><title>Revert "[aot_inductor] move CudaWrapperCodeGen into a separate file (#119448)"</title><link>https://github.com/pytorch/pytorch/commit/3ab08946d5052eaeda11d683d6a58e801a032755</link><description>&lt;p&gt;Revert "[aot_inductor] move CudaWrapperCodeGen into a separate file (#119448)"&lt;/p&gt;
&lt;p&gt;This reverts commit 0597dab523c0a341e136452a8f723f12700164c0.&lt;/p&gt;
&lt;p&gt;Reverted https://github.com/pytorch/pytorch/pull/119448 on behalf of https://github.com/DanilBaibak due to Broken trunk (&lt;a href="https://github.com/pytorch/pytorch/pull/119448#issuecomment-1937345167"&gt;comment&lt;/a&gt;)&lt;/p&gt;</description><pubDate>Sat, 10 Feb 2024 15:04:36 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/3ab08946d5052eaeda11d683d6a58e801a032755</guid></item><item><title>Revert "[aot_inductor] move CppWrapperCodeGen into a separate file (#119491)"</title><link>https://github.com/pytorch/pytorch/commit/d8e319a961bb872027f0abdc413d6beb7502ac9b</link><description>&lt;p&gt;Revert "[aot_inductor] move CppWrapperCodeGen into a separate file (#119491)"&lt;/p&gt;
&lt;p&gt;This reverts commit 760056bbdc552314e7e81adc45e11766ac0f333c.&lt;/p&gt;
&lt;p&gt;Reverted https://github.com/pytorch/pytorch/pull/119491 on behalf of https://github.com/DanilBaibak due to Reverted as a dependency for #119448 (&lt;a href="https://github.com/pytorch/pytorch/pull/119491#issuecomment-1937344548"&gt;comment&lt;/a&gt;)&lt;/p&gt;</description><pubDate>Sat, 10 Feb 2024 15:02:05 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/d8e319a961bb872027f0abdc413d6beb7502ac9b</guid></item><item><title>[inductor] Fix compile error on scan with no mask (#119555)</title><link>https://github.com/pytorch/pytorch/commit/c0f1183eb458f26453ae1d5cd1a0c533c70c4c5c</link><description>&lt;p&gt;[inductor] Fix compile error on scan with no mask (#119555)&lt;/p&gt;
&lt;p&gt;Fixes #119591&lt;/p&gt;
&lt;p&gt;Currently this results in invalid syntax:&lt;br /&gt;
&lt;code&gt;python
tmp4 = tl.where(, tmp1, tmp2)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119555&lt;br /&gt;
Approved by: https://github.com/lezcano&lt;/p&gt;</description><pubDate>Sat, 10 Feb 2024 04:38:40 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/c0f1183eb458f26453ae1d5cd1a0c533c70c4c5c</guid></item><item><title>[aot_inductor] move CppWrapperCodeGen into a separate file (#119491)</title><link>https://github.com/pytorch/pytorch/commit/760056bbdc552314e7e81adc45e11766ac0f333c</link><description>&lt;p&gt;[aot_inductor] move CppWrapperCodeGen into a separate file (#119491)&lt;/p&gt;
&lt;p&gt;This PR moved CppWrapperCodeGen class into a seperate file,&lt;br /&gt;
cpp_wrapper.py, to simplify wrapper.py&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119491&lt;br /&gt;
Approved by: https://github.com/desertfire, https://github.com/albanD&lt;/p&gt;</description><pubDate>Fri, 09 Feb 2024 18:15:56 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/760056bbdc552314e7e81adc45e11766ac0f333c</guid></item><item><title>[aot_inductor] move CudaWrapperCodeGen into a separate file (#119448)</title><link>https://github.com/pytorch/pytorch/commit/0597dab523c0a341e136452a8f723f12700164c0</link><description>&lt;p&gt;[aot_inductor] move CudaWrapperCodeGen into a separate file (#119448)&lt;/p&gt;
&lt;p&gt;wrapper.py is getting more complex. Let's first split it&lt;br /&gt;
into smaller pieces. Will have another PR to move CppWrapperCodeGen.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119448&lt;br /&gt;
Approved by: https://github.com/desertfire&lt;/p&gt;</description><pubDate>Fri, 09 Feb 2024 12:18:04 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/0597dab523c0a341e136452a8f723f12700164c0</guid></item><item><title>Fix Inductor CSE Across Separate Reductions (#119410)</title><link>https://github.com/pytorch/pytorch/commit/bf8a5a11bebe4e7a328b6add83b4e4708217cefc</link><description>&lt;p&gt;Fix Inductor CSE Across Separate Reductions (#119410)&lt;/p&gt;
&lt;p&gt;We were CSE'ing a load across two separate reduction loop bodies. This is because we were examining an indirect indexing that did not have an explicit rindex in its load. I've commented with more details and other potentials on the fix.&lt;/p&gt;
&lt;p&gt;Tried using minifier unsuccessfully and hand minified some but could do more..&lt;/p&gt;
&lt;p&gt;Fix for https://github.com/pytorch/pytorch/issues/119327&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119410&lt;br /&gt;
Approved by: https://github.com/shunting314, https://github.com/jansel&lt;/p&gt;</description><pubDate>Fri, 09 Feb 2024 11:34:57 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/bf8a5a11bebe4e7a328b6add83b4e4708217cefc</guid></item><item><title>Fix FallbackKernel behavior on mutable ops (#118649)</title><link>https://github.com/pytorch/pytorch/commit/01e248d6f1263f875463ce27968712a2ee5b20e3</link><description>&lt;p&gt;Fix FallbackKernel behavior on mutable ops (#118649)&lt;/p&gt;
&lt;p&gt;FallbackKernel wasn't handing mutable ops correctly: it would not report&lt;br /&gt;
them in get_mutation_names or get_alias_names. This would lead to silent&lt;br /&gt;
incorrectness -- Inductor would incorrectly reorder the mutable op with other&lt;br /&gt;
mutable ops.&lt;/p&gt;
&lt;p&gt;This PR fixes that:&lt;br /&gt;
- we only support mutable operations that are "auto_functionalizable".&lt;br /&gt;
  That is, they mutate inputs and do not return aliases of any inputs.&lt;br /&gt;
- Following the Triton kernel work, any mutated inputs must be specified&lt;br /&gt;
  in get_alias_names and processed via mark_node_as_mutating&lt;br /&gt;
- We also do some minor cleanup by killing dead code (FallbackKernel no&lt;br /&gt;
  longer processes OpOverloadPacket) and adding some handling around&lt;br /&gt;
  HOPs.&lt;/p&gt;
&lt;p&gt;Test Plan:&lt;br /&gt;
- new tests&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118649&lt;br /&gt;
Approved by: https://github.com/eellison, https://github.com/oulgen&lt;/p&gt;</description><pubDate>Fri, 09 Feb 2024 11:01:54 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/01e248d6f1263f875463ce27968712a2ee5b20e3</guid></item><item><title>[Inductor max autotune] Multithreaded Precompilation (#119386)</title><link>https://github.com/pytorch/pytorch/commit/5d81ade4849ca8fe1b090d7f65f8dc0f9990938b</link><description>&lt;p&gt;[Inductor max autotune] Multithreaded Precompilation (#119386)&lt;/p&gt;
&lt;p&gt;When using the Cutlass backend, the compilation&lt;br /&gt;
of CUDA source files can totally dominate the runtime required for the benchmarking done&lt;br /&gt;
as part of Autotuning.&lt;/p&gt;
&lt;p&gt;This change adds a multithreaded precompilation phase, which serves to pre-populate the compilation cache ( both in-memory, and a&lt;br /&gt;
possible on-disk sccache ).&lt;/p&gt;
&lt;p&gt;Also it ensures that no unneccessary compilation&lt;br /&gt;
and benchmarking steps are performed, which was peviously the case.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119386&lt;br /&gt;
Approved by: https://github.com/aakhundov&lt;/p&gt;</description><pubDate>Fri, 09 Feb 2024 08:11:30 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/5d81ade4849ca8fe1b090d7f65f8dc0f9990938b</guid></item><item><title>[Inductor] Add Int8 data type into Inductor CPP backend vectorized code generation (#119179)</title><link>https://github.com/pytorch/pytorch/commit/a050d146b7eb98e3e3e0bac0e06d351ee1a9c36d</link><description>&lt;p&gt;[Inductor] Add Int8 data type into Inductor CPP backend vectorized code generation (#119179)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;br /&gt;
Part 1 of fixing https://github.com/pytorch/pytorch/issues/119141 which needs vectorized code generation of per channel quant and int8 data type.&lt;br /&gt;
In the current implementation for quantization, the vectorized code generation only supports the &lt;code&gt;uint8&lt;/code&gt; data type. In this PR, we introduce support for the &lt;code&gt;int8&lt;/code&gt; data type within the vectorized code generation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TestPlan&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;python -u -m pytest -s -v test_cpu_repro.py -k test_decomposed_dequant_relu_quant_int8
python -u -m pytest -s -v test_cpu_repro.py -k test_dequant_quant_lowering_int8
python -u -m pytest -s -v test_cpu_repro.py -k test_dequant_maxpool2d_lowering_int8
python -u -m pytest -s -v test_cpu_repro.py -k test_tile2d_load_decomposed_dequant_add_relu_quant_int8
python -u -m pytest -s -v test_cpu_repro.py -k test_per_tensor_fake_quant_int8
python -u -m pytest -s -v test_cpu_repro.py -k test_non_contiguous_load_buf_quant_int8
python -u -m pytest -s -v test_cpu_repro.py -k test_tile2d_store_channel_shuffle_cl_quant_output_int8
python -u -m pytest -s -v test_cpu_repro.py -k test_dequant_relu_quant_dequant_relu_quant_lowering_int8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Co-authored-by: Jiong Gong &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#106;&amp;#105;&amp;#111;&amp;#110;&amp;#103;&amp;#46;&amp;#103;&amp;#111;&amp;#110;&amp;#103;&amp;#64;&amp;#105;&amp;#110;&amp;#116;&amp;#101;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#106;&amp;#105;&amp;#111;&amp;#110;&amp;#103;&amp;#46;&amp;#103;&amp;#111;&amp;#110;&amp;#103;&amp;#64;&amp;#105;&amp;#110;&amp;#116;&amp;#101;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;&lt;br /&gt;
Pull Request resolved: https://github.com/pytorch/pytorch/pull/119179&lt;br /&gt;
Approved by: https://github.com/peterbell10, https://github.com/jgong5, https://github.com/jansel&lt;/p&gt;</description><pubDate>Thu, 08 Feb 2024 23:33:12 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/a050d146b7eb98e3e3e0bac0e06d351ee1a9c36d</guid></item><item><title>[inductor] Add split scan kernel (#117992)</title><link>https://github.com/pytorch/pytorch/commit/88429a8084d4dce8dc201c5c6ff7597568206261</link><description>&lt;p&gt;[inductor] Add split scan kernel (#117992)&lt;/p&gt;
&lt;p&gt;This PR adds a new type of triton kernel in which data is persistent but the&lt;br /&gt;
reduction dimension is split over multiple blocks (up to the entire kernel).&lt;br /&gt;
though this is called a reduction dimension, in actuality we only support scans.&lt;br /&gt;
because of this limitation, i have to be able to block fusions of split scan&lt;br /&gt;
operations with reductions so chose to add a new &lt;code&gt;ir.SplitScan&lt;/code&gt; node which&lt;br /&gt;
is identical but allows for differentiation in the scheduler.&lt;/p&gt;
&lt;p&gt;The split scan kernel is also the first to require an additional workspace buffer&lt;br /&gt;
which is used to communicate between cuda blocks. this is slightly tricky as we&lt;br /&gt;
the exact scratch space requirement isn't known until the grid size is calculated.&lt;br /&gt;
here i workaround the issue by setting a minimum rblock size and always allocating&lt;br /&gt;
to the maximum possible grid size for a given input tensor.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/117992&lt;br /&gt;
Approved by: https://github.com/jansel&lt;br /&gt;
ghstack dependencies: #117991&lt;/p&gt;</description><pubDate>Thu, 08 Feb 2024 17:56:00 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/88429a8084d4dce8dc201c5c6ff7597568206261</guid></item><item><title>[inductor] Refactor triton range_tree handling (#117991)</title><link>https://github.com/pytorch/pytorch/commit/01edb8a559ac53ce6c2f986d4c67ab188a2e5115</link><description>&lt;p&gt;[inductor] Refactor triton range_tree handling (#117991)&lt;/p&gt;
&lt;p&gt;Currently the dimension handling in triton kernels has various special cases e.g.&lt;br /&gt;
- handling "r" for non-reduction vs persistent reduction vs non-persistent reduction.&lt;br /&gt;
- handling "x" when &lt;code&gt;no_x_dim&lt;/code&gt; is set&lt;/p&gt;
&lt;p&gt;This adds three new properties to the range tree objects which capture the&lt;br /&gt;
same information in a more generic way:&lt;br /&gt;
- &lt;code&gt;is_loop&lt;/code&gt;: true for the "r" dimension of a non-persistent reduction&lt;br /&gt;
- &lt;code&gt;tensor_dim&lt;/code&gt;: Optional index of the triton tensor dimension&lt;br /&gt;
- &lt;code&gt;grid_dim&lt;/code&gt;: Optional index of the triton grid dimension&lt;/p&gt;
&lt;p&gt;The motivation here is I want to add a new split scan kernel type which is:&lt;br /&gt;
- not a persistent reduction, yet has &lt;code&gt;is_loop=False&lt;/code&gt; for the "r" dimension&lt;br /&gt;
- Has a &lt;code&gt;grid_dim&lt;/code&gt; for the "r" dimension&lt;/p&gt;
&lt;p&gt;These flags now only need to be set once in &lt;code&gt;initialize_range_trees&lt;/code&gt;, instead of having&lt;br /&gt;
to infer them throughout the code based on the tree prefix and various other kernel flags.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/117991&lt;br /&gt;
Approved by: https://github.com/lezcano&lt;/p&gt;</description><pubDate>Thu, 08 Feb 2024 17:56:00 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/01edb8a559ac53ce6c2f986d4c67ab188a2e5115</guid></item><item><title>Disable tests that use bfloat 16 for SM &lt; 80 (#118449)</title><link>https://github.com/pytorch/pytorch/commit/454abb6b996b086e971b665be4972a35bc7f555a</link><description>&lt;p&gt;Disable tests that use bfloat 16 for SM &amp;lt; 80 (#118449)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;``&lt;/code&gt;torch._dynamo.exc.BackendCompilerFailed: backend='inductor' raised:&lt;br /&gt;
RuntimeError: Internal Triton PTX codegen error:&lt;br /&gt;
ptxas /tmp/compile-ptx-src-83b319, line 51; error   : Feature '.bf16' requires .target sm_80 or higher&lt;br /&gt;
ptxas /tmp/compile-ptx-src-83b319, line 51; error   : Feature 'cvt with .f32.bf16' requires .target sm_80 or higher&lt;br /&gt;
ptxas /tmp/compile-ptx-src-83b319, line 59; error   : Feature '.bf16' requires .target sm_80 or higher&lt;br /&gt;
ptxas /tmp/compile-ptx-src-83b319, line 59; error   : Feature 'cvt with .f32.bf16' requires .target sm_80 or higher&lt;br /&gt;
ptxas /tmp/compile-ptx-src-83b319, line 65; error   : Feature '.bf16' requires .target sm_80 or higher&lt;br /&gt;
ptxas /tmp/compile-ptx-src-83b319, line 65; error   : Feature 'cvt.bf16.f32' requires .target sm_80 or higher&lt;br /&gt;
ptxas fatal   : Ptx assembly aborted due to errors&lt;br /&gt;
Set TORCH_LOGS="+dynamo" and TORCHDYNAMO_VERBOSE=1 for more information&lt;/p&gt;
&lt;p&gt;You can suppress this exception and fall back to eager by setting:&lt;br /&gt;
    import torch._dynamo&lt;br /&gt;
    torch._dynamo.config.suppress_errors = True&lt;/p&gt;
&lt;p&gt;To execute this test, run the following from the base repo dir:&lt;br /&gt;
     python test/inductor/test_torchinductor.py -k test_bfloat16_to_int16_cuda`&lt;br /&gt;
```&lt;/p&gt;
&lt;p&gt;Fixed test failure that uses bfloat 16 on pre SM80 (V100 is where the test failure is seen for this test)&lt;/p&gt;
&lt;p&gt;See also #113384&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118449&lt;br /&gt;
Approved by: https://github.com/eqy, https://github.com/peterbell10&lt;/p&gt;</description><pubDate>Thu, 08 Feb 2024 17:27:22 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/454abb6b996b086e971b665be4972a35bc7f555a</guid></item><item><title>[aot_inductor] replace TORCH_CHECK with AOTI_CHECK in the generate cpp code (#119220)</title><link>https://github.com/pytorch/pytorch/commit/9f8ade04ccf9647bf7fe1eba906cfdb73d23e4b6</link><description>&lt;p&gt;[aot_inductor] replace TORCH_CHECK with AOTI_CHECK in the generate cpp code (#119220)&lt;/p&gt;
&lt;p&gt;In some cases where we have TORCH_CHECK in loops, it may cause the host&lt;br /&gt;
compiler to spend hours optimizing the run_impl function. This PR&lt;br /&gt;
mitigated the issue by replacing TORCH_CHECK with a custom AOTI_CHECK,&lt;br /&gt;
where we force the underneath assert function to be noinline.&lt;/p&gt;
&lt;p&gt;If forcing noinline caused any serious perf regression, we could&lt;br /&gt;
either add an option to turn on/off enable noinline. Or, we could&lt;br /&gt;
another an option to just turn AOTI_CHECK into a no-op, similar&lt;br /&gt;
to the &lt;code&gt;assert&lt;/code&gt; macro from cassert.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119220&lt;br /&gt;
Approved by: https://github.com/hl475, https://github.com/desertfire&lt;/p&gt;</description><pubDate>Thu, 08 Feb 2024 13:57:27 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/9f8ade04ccf9647bf7fe1eba906cfdb73d23e4b6</guid></item><item><title>[Inductor] Setting kernel launch and exit callbacks for inductor generated triton kernels (#119450)</title><link>https://github.com/pytorch/pytorch/commit/4e93b00b692118b8531f3807ec95eb4c538ea419</link><description>&lt;p&gt;[Inductor] Setting kernel launch and exit callbacks for inductor generated triton kernels (#119450)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CompiledKernel.launch_enter_hook&lt;/code&gt; and &lt;code&gt;CompiledKernel.launch_exit_hook&lt;/code&gt; are hooks that allow external tools to monitor the execution of Triton kernels and read each kernel's metadata. Initially, these hooks have a value of &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Triton's kernel launcher passes hooks and kernel metadata by default, while Inductor's launcher doesn't. This PR could unify the parameters passed to both launchers so that tools can get information from both handwritten Triton kernels and Inductor-generated Triton kernels.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119450&lt;br /&gt;
Approved by: https://github.com/jansel&lt;/p&gt;</description><pubDate>Thu, 08 Feb 2024 12:19:18 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/4e93b00b692118b8531f3807ec95eb4c538ea419</guid></item><item><title>[inductor] Support ProxyExecutor argument codegen for sympy.Expr (#119166)</title><link>https://github.com/pytorch/pytorch/commit/3829b55416e115603d21073a8b3710324abae059</link><description>&lt;p&gt;[inductor] Support ProxyExecutor argument codegen for sympy.Expr (#119166)&lt;/p&gt;
&lt;p&gt;Differential Revision: D53398312&lt;/p&gt;
&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;Currently, if a sympy expression that uses a magic method like &lt;code&gt;Max&lt;/code&gt; is passed as an argument to ProxyExecutor, then C++ compilation will fail. We need to use std::max method instead.&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1&gt;What we see&lt;/h1&gt;
&lt;p&gt;aoti_torch_proxy_executor_call_function(..., std::vector&lt;int64_t&gt;{Max(1025, u1)}.data(), ...);&lt;/p&gt;
&lt;h1&gt;What we want&lt;/h1&gt;
&lt;p&gt;aoti_torch_proxy_executor_call_function(..., std::vector&lt;int64_t&gt;{std::max(1025L, u1)}.data(), ...)&lt;br /&gt;
```&lt;/p&gt;
&lt;h2&gt;Approach&lt;/h2&gt;
&lt;p&gt;Use C++ wrapper's expression printer to handle this conversion&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119166&lt;br /&gt;
Approved by: https://github.com/aakhundov&lt;/p&gt;</description><pubDate>Mon, 05 Feb 2024 16:33:25 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/3829b55416e115603d21073a8b3710324abae059</guid></item><item><title>[inductor] make multi-kernel work with cpp-wrapper (#117813)</title><link>https://github.com/pytorch/pytorch/commit/fd0bf96c2b9aea46f0597ba6fef9b896f5b874bb</link><description>&lt;p&gt;[inductor] make multi-kernel work with cpp-wrapper (#117813)&lt;/p&gt;
&lt;p&gt;Make multi-kernel work with cpp-wrapper. multi-kernel generates two equivalent variants for a reduction. At runtime the faster one is picked. But cpp-wrapper need save cubin file during codegen. They don't work with each other at the beginning.&lt;/p&gt;
&lt;p&gt;Thanks Jason for suggesting a neat way to integrate these two. cpp-wrapper does 2 passes codegen right now. For the first pass, we still generate multi-kernel code and run it; for the second pass, we load the cubin file for the faster kernel directly. And multi-kernel python code is not generated for the second pass since they should not be needed.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/117813&lt;br /&gt;
Approved by: https://github.com/jansel&lt;/p&gt;</description><pubDate>Mon, 05 Feb 2024 15:35:41 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/fd0bf96c2b9aea46f0597ba6fef9b896f5b874bb</guid></item><item><title>Revert "[inductor] make multi-kernel work with cpp-wrapper (#117813)"</title><link>https://github.com/pytorch/pytorch/commit/b964a1222cef0af3aebe04e25714aa08c97a6cd3</link><description>&lt;p&gt;Revert "[inductor] make multi-kernel work with cpp-wrapper (#117813)"&lt;/p&gt;
&lt;p&gt;This reverts commit c24ffc3f66b2270dfc65a404687b91b55ed580e9.&lt;/p&gt;
&lt;p&gt;Reverted https://github.com/pytorch/pytorch/pull/117813 on behalf of https://github.com/atalman due to Failing internal tests (&lt;a href="https://github.com/pytorch/pytorch/pull/117813#issuecomment-1927877102"&gt;comment&lt;/a&gt;)&lt;/p&gt;</description><pubDate>Mon, 05 Feb 2024 11:25:39 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/b964a1222cef0af3aebe04e25714aa08c97a6cd3</guid></item><item><title>[aotinductor] Migrate fuse_split_linear_add from dper_pass to AOTI based on predispatch IR (#118983)</title><link>https://github.com/pytorch/pytorch/commit/fa8d97776cb2051e1066f0f9426e25a1bfe7a1cf</link><description>&lt;p&gt;[aotinductor] Migrate fuse_split_linear_add from dper_pass to AOTI based on predispatch IR (#118983)&lt;/p&gt;
&lt;p&gt;Summary: As titled. Added support of fuse_split_linear_add in pregrad passes based on predispatch IR&lt;/p&gt;
&lt;p&gt;Test Plan: TORCH_LOGS=inductor,aot   buck2 run  mode/opt mode/inplace caffe2/test/inductor/fb:test_split_cat_fx_passes_aten_fb&lt;/p&gt;
&lt;p&gt;Differential Revision: D53302168&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118983&lt;br /&gt;
Approved by: https://github.com/kflu, https://github.com/chenyang78&lt;/p&gt;</description><pubDate>Mon, 05 Feb 2024 09:58:42 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/fa8d97776cb2051e1066f0f9426e25a1bfe7a1cf</guid></item><item><title>make nanogpt work with both compiled autograd and _LazyGraphModule (#118981)</title><link>https://github.com/pytorch/pytorch/commit/a72190fd51f19cbfb5c09ae3088729f94aef7141</link><description>&lt;p&gt;make nanogpt work with both compiled autograd and _LazyGraphModule (#118981)&lt;/p&gt;
&lt;p&gt;@xmfan and @fegin reported that _LazyGraphModule ( https://github.com/pytorch/pytorch/pull/117911 ) makes nanogpt training fail with compiled autograd.&lt;/p&gt;
&lt;p&gt;We have a repro:  &lt;code&gt;python benchmarks/dynamo/torchbench.py --training --backend=inductor --disable-cudagraphs --accuracy --only nanogpt --repeat 1 --compiled-autograd&lt;/code&gt;&lt;br /&gt;
but it's still mysterious how to trigger the issue with a toy model.&lt;/p&gt;
&lt;p&gt;The error message for the failure is https://gist.github.com/shunting314/6402a6388b3539956090b6bc098952fb . In compile_fx we will call &lt;code&gt;detect_fake_mode&lt;/code&gt;. This function will look for an active FakeTensorMode from both TracingContext and example inputs. The error is triggered because we find different FakeTensorMode from these 2 sources.&lt;/p&gt;
&lt;p&gt;Although I don't know what really causes the discrepancy of FakeTensorMode above, the fix here is to force _LazyGraphModule recompilation if we have compiled autograd enabled. This does not hurt compilation time most of the time because we anyway will call the graph module here in the backward pass when compiled autograd is enabled: https://github.com/pytorch/pytorch/blob/855d5f144efc1db50316b9fcad1e62bf37caed10/torch/_functorch/_aot_autograd/jit_compile_runtime_wrappers.py#L705&lt;/p&gt;
&lt;p&gt;Let me know if we can have a better fix.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118981&lt;br /&gt;
Approved by: https://github.com/jansel&lt;/p&gt;</description><pubDate>Mon, 05 Feb 2024 02:40:06 GMT</pubDate><guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/a72190fd51f19cbfb5c09ae3088729f94aef7141</guid></item><item>
      <title>[AOTI] Make abi_compatible as default for OSS CI (#119126)</title>
      <link>https://github.com/pytorch/pytorch/commit/b41f3e8df1b6ac2240d591f5e53b36589e90299b</link>
      <description>&lt;p&gt;[AOTI] Make abi_compatible as default for OSS CI (#119126)&lt;/p&gt;
&lt;p&gt;Summary: Introduce an environment varible AOT_INDUCTOR_ABI_COMPATIBLE to control the ABI-compatible mode, and turn it on for OSS CI.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119126&lt;br /&gt;
Approved by: https://github.com/chenyang78&lt;br /&gt;
ghstack dependencies: #119125&lt;/p&gt;</description>
      <pubDate>Sun, 04 Feb 2024 07:48:58 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/b41f3e8df1b6ac2240d591f5e53b36589e90299b</guid>
    </item>
    <item>
      <title>[AOTI] Support copy_, _fft_c2c and view_as_real in C shim (#119125)</title>
      <link>https://github.com/pytorch/pytorch/commit/79b20aec764c62e7a086aa2e2515b21731c9a831</link>
      <description>&lt;p&gt;[AOTI] Support copy_, _fft_c2c and view_as_real in C shim (#119125)&lt;/p&gt;
&lt;p&gt;Summary: These ops exist in GoogleFnet. Also add a Complex fallback for convert_element_type. After this PR, we can enable ABI-compatible for AOTInductor OSS CI.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119125&lt;br /&gt;
Approved by: https://github.com/chenyang78&lt;/p&gt;</description>
      <pubDate>Sun, 04 Feb 2024 07:48:58 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/79b20aec764c62e7a086aa2e2515b21731c9a831</guid>
    </item>
    <item>
      <title>[auto_functionalize] Remove mutated_args_name from args (#119050)</title>
      <link>https://github.com/pytorch/pytorch/commit/440b7d52793be046354c03521295ab7f2d3969f2</link>
      <description>&lt;p&gt;[auto_functionalize] Remove mutated_args_name from args (#119050)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;auto_functionalize&lt;/code&gt; currently takes a custom op, a list of mutated argument names, and inputs to the custom op as kwargs. The list of mutated argument names is computed from the schema, and gets created when we're tracing. However, it seems that having the list of mutated argument names is a little unnecessary since we can always recompute it from the schema during runtime.&lt;/p&gt;
&lt;p&gt;This also prevents the case where users might incorrectly modify the inputs to this operator, as we will now just recompute it during the runtime. This probably won't affect things too much because inductor will decompose auto_functionalize.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/119050&lt;br /&gt;
Approved by: https://github.com/zou3519&lt;/p&gt;</description>
      <pubDate>Fri, 02 Feb 2024 16:27:14 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/440b7d52793be046354c03521295ab7f2d3969f2</guid>
    </item>
    <item>
      <title>Expose aggressive_recomputation as an inductor config (#118943)</title>
      <link>https://github.com/pytorch/pytorch/commit/de6a9060932f4541863130d4cb8e90267f22dd56</link>
      <description>&lt;p&gt;Expose aggressive_recomputation as an inductor config (#118943)&lt;/p&gt;
&lt;p&gt;Summary:&lt;br /&gt;
As title.&lt;/p&gt;
&lt;p&gt;We found aggressive_recomputation shows memory savings (7% on APS COFFEE model) with 2% QPS loss.&lt;/p&gt;
&lt;p&gt;It also gives very promising signal on our auto ac experiments: https://docs.google.com/document/d/1S2qgMg1CwAQ4U1Ffuk2epbEOx06ogZhioX2jKCwL7ZQ/edit&lt;/p&gt;
&lt;p&gt;{F1426175073}&lt;/p&gt;
&lt;p&gt;Test Plan:&lt;br /&gt;
APS COFFEE from silverlakeli&lt;br /&gt;
- Zoom of baseline job: https://www.internalfb.com/intern/zoomer/?profiling_run_fbid=927380488801910&amp;amp;tab=overview&lt;br /&gt;
- Zoom of job with aggressive_recomputation: https://www.internalfb.com/intern/zoomer/?profiling_run_fbid=1126815608217470&amp;amp;tab=overview&lt;/p&gt;
&lt;p&gt;APS 1100x shrunk version:&lt;br /&gt;
- baseline: https://www.internalfb.com/mast/job/aps-yuzhenhuang-afe049505a&lt;br /&gt;
- test: https://www.internalfb.com/mast/job/aps-yuzhenhuang-709e41bf0d&lt;br /&gt;
Memory from 42.98% -&amp;gt; 41.04%.&lt;/p&gt;
&lt;p&gt;Reviewed By: yf225, yuxihu, silverlakeli, richqyz&lt;/p&gt;
&lt;p&gt;Differential Revision: D53248057&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118943&lt;br /&gt;
Approved by: https://github.com/anijain2305, https://github.com/yanboliang&lt;/p&gt;</description>
      <pubDate>Fri, 02 Feb 2024 16:17:03 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/de6a9060932f4541863130d4cb8e90267f22dd56</guid>
    </item>
    <item>
      <title>[inductor] make multi-kernel work with cpp-wrapper (#117813)</title>
      <link>https://github.com/pytorch/pytorch/commit/c24ffc3f66b2270dfc65a404687b91b55ed580e9</link>
      <description>&lt;p&gt;[inductor] make multi-kernel work with cpp-wrapper (#117813)&lt;/p&gt;
&lt;p&gt;Make multi-kernel work with cpp-wrapper. multi-kernel generates two equivalent variants for a reduction. At runtime the faster one is picked. But cpp-wrapper need save cubin file during codegen. They don't work with each other at the beginning.&lt;/p&gt;
&lt;p&gt;Thanks Jason for suggesting a neat way to integrate these two. cpp-wrapper does 2 passes codegen right now. For the first pass, we still generate multi-kernel code and run it; for the second pass, we load the cubin file for the faster kernel directly. And multi-kernel python code is not generated for the second pass since they should not be needed.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/117813&lt;br /&gt;
Approved by: https://github.com/jansel&lt;/p&gt;</description>
      <pubDate>Fri, 02 Feb 2024 16:06:21 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/c24ffc3f66b2270dfc65a404687b91b55ed580e9</guid>
    </item>
    <item>
      <title>[Inductor] GEMM shape padding improvements (#118522)</title>
      <link>https://github.com/pytorch/pytorch/commit/cc46829f96dba05b9b46bae31a1e6d2a053f667e</link>
      <description>&lt;p&gt;[Inductor] GEMM shape padding improvements (#118522)&lt;/p&gt;
&lt;p&gt;Improvements to shape padding logic in torch/_inductor/pad_mm.py&lt;/p&gt;
&lt;p&gt;These changes could lead up to 14% perf improvement for certain Meta internal models in experiments.&lt;/p&gt;
&lt;p&gt;Most notably:&lt;br /&gt;
  * 1.) Use aten.const_pad_nd operation to pad Tensors in a single op instead of using multiple steps involving intermediate buffers. This appears to be more performant than the previous logic, confirmed by Profiling &amp;amp; Benchmarking results ( Meta internal )&lt;br /&gt;
 * 2.) Make many paddings unneccessary using explicitly transposed GEMM when either M or N dimension is properly aligned but the other is not, configurable via config.shape_pad_use_transpose (default: True).&lt;br /&gt;
  * 3.) Enable shape padding for the Inductor CUDA  /  Cutlass backend for all GEMM ops where Cutlass would be enabled, without benchmarking in that case.&lt;br /&gt;
  * Add config flag to always pad shapes (without benchmarking first), configurable via config.force_shape_pad (default: False )&lt;br /&gt;
  * Added several new unit tests to ensure tensors are padded such that they meet all alignment requirements after padding.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118522&lt;br /&gt;
Approved by: https://github.com/jansel, https://github.com/eellison&lt;/p&gt;</description>
      <pubDate>Fri, 02 Feb 2024 00:50:06 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/cc46829f96dba05b9b46bae31a1e6d2a053f667e</guid>
    </item>
    <item>
      <title>[inductor] skip launching kernels with zero grid in AOTInductor when using backed symints (#118654)</title>
      <link>https://github.com/pytorch/pytorch/commit/babd6c776dfdc5db0f0f1bc69e41a5a5d76ca719</link>
      <description>&lt;p&gt;[inductor] skip launching kernels with zero grid in AOTInductor when using backed symints (#118654)&lt;/p&gt;
&lt;p&gt;Like #110312 but we also run this check when backed symints are in the grid (e.g. s1 / 512)&lt;/p&gt;
&lt;h3&gt;Why?&lt;/h3&gt;
&lt;p&gt;Let's say we lower a model and generate GPU kernel grid with symbolic shapes, for e.g. &lt;code&gt;s1 / 512&lt;/code&gt;. If at some point later, we ran the lowered model with inputs s.t. &lt;code&gt;s1 = 0&lt;/code&gt;, then we'll launch the kernel with a &lt;code&gt;0&lt;/code&gt; sized grid. This surfaces as &lt;code&gt;CUDA driver error: invalid argument&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To avoid this, we check for a &lt;code&gt;0&lt;/code&gt; sized grid whenever there's symbolic shapes which includes backed and unbacked symints.&lt;/p&gt;
&lt;p&gt;This adds non-zero overhead to the CPU. However, in return, we get better reliability when encountering this scenario. This scenario happened when serving an internal model.&lt;/p&gt;
&lt;h3&gt;Test&lt;/h3&gt;
&lt;p&gt;```&lt;br /&gt;
$ python test/inductor/test_aot_inductor.py -k test_zero_grid_with_unbacked_symbols&lt;br /&gt;
OK (skipped=3)&lt;/p&gt;
&lt;p&gt;$ python test/inductor/test_aot_inductor.py -k test_zero_grid_with_backed_symbols&lt;/p&gt;
&lt;h1&gt;Before&lt;/h1&gt;
&lt;p&gt;Error: CUDA driver error: invalid argument&lt;br /&gt;
FAILED (errors=2, skipped=3)&lt;/p&gt;
&lt;h1&gt;Now&lt;/h1&gt;
&lt;p&gt;OK (skipped=3)&lt;br /&gt;
```&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118654&lt;br /&gt;
Approved by: https://github.com/chenyang78, https://github.com/desertfire&lt;/p&gt;</description>
      <pubDate>Thu, 01 Feb 2024 19:19:52 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/babd6c776dfdc5db0f0f1bc69e41a5a5d76ca719</guid>
    </item>
    <item>
      <title>[inductor] Fix an internal test issue (#118903)</title>
      <link>https://github.com/pytorch/pytorch/commit/946ea47a4fcf7883560743e3b290547dc506056a</link>
      <description>&lt;p&gt;[inductor] Fix an internal test issue (#118903)&lt;/p&gt;
&lt;p&gt;Summary: test_add_complex4 that introduced in https://github.com/pytorch/pytorch/pull/117929  fails internally, because of a cpp compilation issue for cpu. Specify the right device in the test instead.&lt;/p&gt;
&lt;p&gt;Differential Revision: &lt;a href="https://our.internmc.facebook.com/intern/diff/D53333919"&gt;D53333919&lt;/a&gt;&lt;br /&gt;
Pull Request resolved: https://github.com/pytorch/pytorch/pull/118903&lt;br /&gt;
Approved by: https://github.com/clee2000&lt;/p&gt;</description>
      <pubDate>Thu, 01 Feb 2024 19:18:12 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/946ea47a4fcf7883560743e3b290547dc506056a</guid>
    </item>
    <item>
      <title>Revert "[inductor] make multi-kernel work with cpp-wrapper (#117813)"</title>
      <link>https://github.com/pytorch/pytorch/commit/796278b57e95c9a6c2bdcdea413d61b31fb6344a</link>
      <description>&lt;p&gt;Revert "[inductor] make multi-kernel work with cpp-wrapper (#117813)"&lt;/p&gt;
&lt;p&gt;This reverts commit 20484a193626ef72e0b3f35914f17deb2a89b8fc.&lt;/p&gt;
&lt;p&gt;Reverted https://github.com/pytorch/pytorch/pull/117813 on behalf of https://github.com/atalman due to broke linux-focal-rocm5.7-py3.8 tests (&lt;a href="https://github.com/pytorch/pytorch/pull/117813#issuecomment-1922613135"&gt;comment&lt;/a&gt;)&lt;/p&gt;</description>
      <pubDate>Thu, 01 Feb 2024 17:19:19 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/796278b57e95c9a6c2bdcdea413d61b31fb6344a</guid>
    </item>
    <item>
      <title>Workaround for super() calls in test_torchinductor_dynamic_shapes (#118586)</title>
      <link>https://github.com/pytorch/pytorch/commit/08d90a1ea97d17b9fb233a17c605415e13497922</link>
      <description>&lt;p&gt;Workaround for super() calls in test_torchinductor_dynamic_shapes (#118586)&lt;/p&gt;
&lt;p&gt;Info about super in dynamic classes:&lt;br /&gt;
https://stackoverflow.com/questions/71879642/how-to-pass-function-with-super-when-creating-class-dynamically&lt;br /&gt;
https://stackoverflow.com/questions/43782944/super-does-not-work-together-with-type-supertype-obj-obj-must-be-an-i&lt;/p&gt;
&lt;p&gt;Calling super(TestCase) actually calls TestCase's parent's functions, bypassing TestCase itself's functions&lt;/p&gt;
&lt;p&gt;Mainly doing this because it's making disable bot spam&lt;/p&gt;
&lt;p&gt;Test: checked locally and check that https://github.com/pytorch/pytorch/issues/117954 actually got skipped&lt;/p&gt;
&lt;p&gt;Logs for &lt;code&gt;inductor/test_torchinductor_dynamic_shapes.py::TestInductorDynamicCUDA::test_unbacked_index_select_cuda&lt;/code&gt;&lt;br /&gt;
https://ossci-raw-job-status.s3.amazonaws.com/log/21083466405&lt;br /&gt;
Afaik this PR doesn't actually cause the test to fail, it just surfaces the error since the mem leak check wasn't running previously&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118586&lt;br /&gt;
Approved by: https://github.com/huydhn&lt;/p&gt;</description>
      <pubDate>Thu, 01 Feb 2024 16:40:37 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/08d90a1ea97d17b9fb233a17c605415e13497922</guid>
    </item>
    <item>
      <title>[inductor] more accurate throughput calculations for kernel benchmarks (#118858)</title>
      <link>https://github.com/pytorch/pytorch/commit/61b572ed5638dea4b47c16672eb7e7361e806bfc</link>
      <description>&lt;p&gt;[inductor] more accurate throughput calculations for kernel benchmarks (#118858)&lt;/p&gt;
&lt;p&gt;Our current throughput calculations for kernel benchmarks have some issues,&lt;br /&gt;
particularly when we slice inputs in the kernel. In such cases, we count&lt;br /&gt;
the original inputs as part of the memory traffic passed across the kernel.&lt;br /&gt;
This is incorrect because it may result in a much larger throughput&lt;br /&gt;
calculation, which can even exceed the theoretical bandwidth.&lt;/p&gt;
&lt;p&gt;Instead, we should only count the size of the "slices" that contribute to&lt;br /&gt;
the actual memory traffic.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118858&lt;br /&gt;
Approved by: https://github.com/jansel&lt;/p&gt;</description>
      <pubDate>Thu, 01 Feb 2024 13:42:14 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/61b572ed5638dea4b47c16672eb7e7361e806bfc</guid>
    </item>
    <item>
      <title>[inductor] make multi-kernel work with cpp-wrapper (#117813)</title>
      <link>https://github.com/pytorch/pytorch/commit/20484a193626ef72e0b3f35914f17deb2a89b8fc</link>
      <description>&lt;p&gt;[inductor] make multi-kernel work with cpp-wrapper (#117813)&lt;/p&gt;
&lt;p&gt;Make multi-kernel work with cpp-wrapper. multi-kernel generates two equivalent variants for a reduction. At runtime the faster one is picked. But cpp-wrapper need save cubin file during codegen. They don't work with each other at the beginning.&lt;/p&gt;
&lt;p&gt;Thanks Jason for suggesting a neat way to integrate these two. cpp-wrapper does 2 passes codegen right now. For the first pass, we still generate multi-kernel code and run it; for the second pass, we load the cubin file for the faster kernel directly. And multi-kernel python code is not generated for the second pass since they should not be needed.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/117813&lt;br /&gt;
Approved by: https://github.com/jansel&lt;/p&gt;</description>
      <pubDate>Thu, 01 Feb 2024 13:29:02 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/20484a193626ef72e0b3f35914f17deb2a89b8fc</guid>
    </item>
    <item>
      <title>[inductor] Handle special values correctly in ir.Scan codegen (#118788)</title>
      <link>https://github.com/pytorch/pytorch/commit/9c2b43cc5057cb840879224e3bdced58d6334c0a</link>
      <description>&lt;p&gt;[inductor] Handle special values correctly in ir.Scan codegen (#118788)&lt;/p&gt;
&lt;p&gt;Special values (&lt;code&gt;NaN&lt;/code&gt;/&lt;code&gt;+/-Inf&lt;/code&gt;) are not correctly during codegen for &lt;code&gt;ir.Scan&lt;/code&gt; nodes. This&lt;br /&gt;
is a fairly minor bugfix that has not come up since the only two scan&lt;br /&gt;
ops with lowerings use "normal" values.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118788&lt;br /&gt;
Approved by: https://github.com/peterbell10&lt;/p&gt;</description>
      <pubDate>Thu, 01 Feb 2024 06:54:20 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/9c2b43cc5057cb840879224e3bdced58d6334c0a</guid>
    </item>
    <item>
      <title>[AOTInductor] Add Runtime Constant-folding for AOTInductor (#118765)</title>
      <link>https://github.com/pytorch/pytorch/commit/2b48891e62e5c4b57c8cac92cee5eb71228a203a</link>
      <description>&lt;p&gt;[AOTInductor] Add Runtime Constant-folding for AOTInductor (#118765)&lt;/p&gt;
&lt;p&gt;Summary:&lt;br /&gt;
Add Runtime Constant-folding for AOTInductor.&lt;br /&gt;
This also include the invocation of constant folding at load time.&lt;/p&gt;
&lt;p&gt;The constant folding lowering is a 2-step process.&lt;br /&gt;
First, we split the graph into 2 modules, one of it is the constant module, which doesn't depend on any input and the whole module could be inferred (constant-folded) one-time and be reused. The constant module, is lowered, and being codegen-ed as usual and cached (let's call this constant code). The constant code reuses the whole lowering/profiling/etc. process, only difference is that we do not generate any headers or initialization for the constant code.&lt;br /&gt;
Second, after handling the constant module, we take care of the main module (which is the part that would depend on the user input.) For the main module, we take in one additional component, the constant code, compare with a normal lowering. Addition step we do here is that, we inject the constant code into the codegen-ed main module, and create the caller for the main module to consume the result of the constant module.&lt;/p&gt;
&lt;p&gt;Test Plan: Unit tests included in commit.&lt;/p&gt;
&lt;p&gt;Differential Revision: D53274382&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118765&lt;br /&gt;
Approved by: https://github.com/chenyang78&lt;/p&gt;</description>
      <pubDate>Wed, 31 Jan 2024 20:54:25 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/2b48891e62e5c4b57c8cac92cee5eb71228a203a</guid>
    </item>
    <item>
      <title>[Inductor] Skip triton templates for mixedmm on SM70- (#118591)</title>
      <link>https://github.com/pytorch/pytorch/commit/6c67f3333a539e8f29515375a87612897214f8f2</link>
      <description>&lt;p&gt;[Inductor] Skip triton templates for mixedmm on SM70- (#118591)&lt;/p&gt;
&lt;p&gt;As it results in numerical errors, see https://github.com/pytorch/pytorch/issues/117144&lt;/p&gt;
&lt;p&gt;Fixes https://github.com/pytorch/pytorch/issues/117144&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118591&lt;br /&gt;
Approved by: https://github.com/jansel&lt;/p&gt;</description>
      <pubDate>Wed, 31 Jan 2024 15:30:45 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/6c67f3333a539e8f29515375a87612897214f8f2</guid>
    </item>
    <item>
      <title>Revert "Workaround for super() calls in test_torchinductor_dynamic_shapes (#118586)"</title>
      <link>https://github.com/pytorch/pytorch/commit/483001e8468209911292aa7f23c2a25fbfb6e31b</link>
      <description>&lt;p&gt;Revert "Workaround for super() calls in test_torchinductor_dynamic_shapes (#118586)"&lt;/p&gt;
&lt;p&gt;This reverts commit f2682e75e6fd735c4a84afe59eafd541f7643f4a.&lt;/p&gt;
&lt;p&gt;Reverted https://github.com/pytorch/pytorch/pull/118586 on behalf of https://github.com/atalman due to Broke slow tests (&lt;a href="https://github.com/pytorch/pytorch/pull/118586#issuecomment-1919810802"&gt;comment&lt;/a&gt;)&lt;/p&gt;</description>
      <pubDate>Wed, 31 Jan 2024 11:44:29 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/483001e8468209911292aa7f23c2a25fbfb6e31b</guid>
    </item>
    <item>
      <title>[AOTI] Support _embedding_bag in C shim (#118706)</title>
      <link>https://github.com/pytorch/pytorch/commit/1128cf96f078a76f27b038d7adbc2b72fe8927e2</link>
      <description>&lt;p&gt;[AOTI] Support _embedding_bag in C shim (#118706)&lt;/p&gt;
&lt;p&gt;Summary: At some point I will stop manually adding ops to C shim, but use torchgen to generate those code. For the near term, I need to add a few more in order to switch the AOTInductor dashboard run.&lt;/p&gt;
&lt;p&gt;Differential Revision: &lt;a href="https://our.internmc.facebook.com/intern/diff/D53249074"&gt;D53249074&lt;/a&gt;&lt;br /&gt;
Pull Request resolved: https://github.com/pytorch/pytorch/pull/118706&lt;br /&gt;
Approved by: https://github.com/frank-wei, https://github.com/aakhundov&lt;br /&gt;
ghstack dependencies: #118704, #118705&lt;/p&gt;</description>
      <pubDate>Wed, 31 Jan 2024 07:02:40 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/1128cf96f078a76f27b038d7adbc2b72fe8927e2</guid>
    </item>
    <item>
      <title>[inductor] Refactor ir.ComplexView (#118704)</title>
      <link>https://github.com/pytorch/pytorch/commit/dd52939438834545632ccc9e986029d63f68e064</link>
      <description>&lt;p&gt;[inductor] Refactor ir.ComplexView (#118704)&lt;/p&gt;
&lt;p&gt;Summary: Make ir.ComplexView a subclass of ir.FallbackKernel, to unify the codegen logic&lt;/p&gt;
&lt;p&gt;Differential Revision: &lt;a href="https://our.internmc.facebook.com/intern/diff/D53248972"&gt;D53248972&lt;/a&gt;&lt;br /&gt;
Pull Request resolved: https://github.com/pytorch/pytorch/pull/118704&lt;br /&gt;
Approved by: https://github.com/frank-wei&lt;/p&gt;</description>
      <pubDate>Wed, 31 Jan 2024 06:42:29 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/dd52939438834545632ccc9e986029d63f68e064</guid>
    </item>
    <item>
      <title>[Cutlass 3.3.0 submodule upgrade] (#118629)</title>
      <link>https://github.com/pytorch/pytorch/commit/35f3ccffd4dd836d71b1db6d560800597979ec5b</link>
      <description>&lt;p&gt;[Cutlass 3.3.0 submodule upgrade] (#118629)&lt;/p&gt;
&lt;p&gt;Cutlass 3.3 offers the following improvements:&lt;/p&gt;
&lt;p&gt;Adds support for mixed precision GEMMs On Hopper and Ampere Adds support for &amp;lt; 16B aligned GEMMs on Hopper&lt;br /&gt;
Enhancements to EVT&lt;br /&gt;
Enhancements to Python interface&lt;br /&gt;
Enhancements to Sub-byte type handling in CuTe&lt;br /&gt;
Several other bug-fixes and performance improvements. minor doc update&lt;br /&gt;
Test Plan:&lt;/p&gt;
&lt;p&gt;CI ( ciflow/trunk, ciflow/inductor )&lt;br /&gt;
pytest test/inductor/test_max_autotune.py&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118629&lt;br /&gt;
Approved by: https://github.com/drisspg, https://github.com/Skylion007, https://github.com/khabinov&lt;/p&gt;</description>
      <pubDate>Wed, 31 Jan 2024 05:53:58 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/35f3ccffd4dd836d71b1db6d560800597979ec5b</guid>
    </item>
    <item>
      <title>Reland: [aotinductor] Replicate split_cat from torch IR to predispatch IR" (#118590)</title>
      <link>https://github.com/pytorch/pytorch/commit/6fa162e68148c10626bc824bc3eb31d56db4c2d8</link>
      <description>&lt;p&gt;Reland: [aotinductor] Replicate split_cat from torch IR to predispatch IR" (#118590)&lt;/p&gt;
&lt;p&gt;Summary:&lt;br /&gt;
This is part the pass migration efforts. The final target is removing the acc tracer in AOTI.&lt;br /&gt;
In this diff, I did a few things:&lt;br /&gt;
1. copy and modify the &lt;code&gt;fx_passes/split_cat.py&lt;/code&gt; passes based on predispatch IR.&lt;br /&gt;
2. verify the correctness by copying the &lt;code&gt;test_split_cat_fx_passes.py&lt;/code&gt; and create a new file &lt;code&gt;test_split_cat_fx_passes_aten_fb.py&lt;/code&gt; which is executed in AOTI and checked the counters&lt;br /&gt;
3. create a util function to execute the pass and compare the before/after graph to give user more information like pass effect and time spent. It will create logs like&lt;br /&gt;
&lt;code&gt;[2024-01-25 20:26:48,997] torch._inductor.utils: [INFO] [Pre grad(predispatch IR)]Apply split_cat, index: 0, save before/after graph to /tmp/tmpvlpwrklp, graph before/after are the same = False, time elapsed = 0:00:00.001585
[2024-01-25 20:26:49,000] torch._inductor.utils: [INFO] [Pre grad(predispatch IR)]Apply split_cat, index: 1, save before/after graph to /tmp/tmpz_onjfeu, graph before/after are the same = False, time elapsed = 0:00:00.001873
[2024-01-25 20:26:49,002] torch._inductor.utils: [INFO] [Pre grad(predispatch IR)]Apply split_cat, index: 2, save before/after graph to /tmp/tmpgkck8yko, graph before/after are the same = True, time elapsed = 0:00:00.000269
[2024-01-25 20:26:49,007] torch._inductor.utils: [INFO] [Pre grad(predispatch IR)]Apply split_cat, index: 3, save before/after graph to /tmp/tmpquenq06y, graph before/after are the same = False, time elapsed = 0:00:00.003621
[2024-01-25 20:26:49,009] torch._inductor.utils: [INFO] [Pre grad(predispatch IR)]Apply split_cat, index: 4, save before/after graph to /tmp/tmpi8fia0dv, graph before/after are the same = True, time elapsed = 0:00:00.000190&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Differential Revision: D53171027&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118590&lt;br /&gt;
Approved by: https://github.com/kflu, https://github.com/khabinov, https://github.com/chenyang78&lt;/p&gt;</description>
      <pubDate>Tue, 30 Jan 2024 16:09:46 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/6fa162e68148c10626bc824bc3eb31d56db4c2d8</guid>
    </item>
    <item>
      <title>Workaround for super() calls in test_torchinductor_dynamic_shapes (#118586)</title>
      <link>https://github.com/pytorch/pytorch/commit/f2682e75e6fd735c4a84afe59eafd541f7643f4a</link>
      <description>&lt;p&gt;Workaround for super() calls in test_torchinductor_dynamic_shapes (#118586)&lt;/p&gt;
&lt;p&gt;Info about super in dynamic classes:&lt;br /&gt;
https://stackoverflow.com/questions/71879642/how-to-pass-function-with-super-when-creating-class-dynamically&lt;br /&gt;
https://stackoverflow.com/questions/43782944/super-does-not-work-together-with-type-supertype-obj-obj-must-be-an-i&lt;/p&gt;
&lt;p&gt;Calling super(TestCase) actually calls TestCase's parent's functions, bypassing TestCase itself's functions&lt;/p&gt;
&lt;p&gt;Mainly doing this because it's making disable bot spam&lt;/p&gt;
&lt;p&gt;Test: checked locally and check that https://github.com/pytorch/pytorch/issues/117954 actually got skipped&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118586&lt;br /&gt;
Approved by: https://github.com/huydhn&lt;/p&gt;</description>
      <pubDate>Tue, 30 Jan 2024 13:34:05 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/f2682e75e6fd735c4a84afe59eafd541f7643f4a</guid>
    </item>
    <item>
      <title>[inductor] Use at::detail::empty_strided_* in cpp_wraper mode (#118490)</title>
      <link>https://github.com/pytorch/pytorch/commit/e332653eb38b6f97e8088b4d3adc5b112fe8f761</link>
      <description>&lt;p&gt;[inductor] Use at::detail::empty_strided_* in cpp_wraper mode (#118490)&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118490&lt;br /&gt;
Approved by: https://github.com/desertfire&lt;/p&gt;</description>
      <pubDate>Tue, 30 Jan 2024 13:03:19 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/e332653eb38b6f97e8088b4d3adc5b112fe8f761</guid>
    </item>
    <item>
      <title>[inductor][cpp] support scalar value in vec reduction (#118511)</title>
      <link>https://github.com/pytorch/pytorch/commit/e5bb527d3e91b244404e142dfac8e9e55e02aa81</link>
      <description>&lt;p&gt;[inductor][cpp] support scalar value in vec reduction (#118511)&lt;/p&gt;
&lt;p&gt;Fix https://github.com/pytorch/pytorch/issues/118379&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118511&lt;br /&gt;
Approved by: https://github.com/leslie-fang-intel, https://github.com/lezcano, https://github.com/jansel&lt;/p&gt;</description>
      <pubDate>Tue, 30 Jan 2024 05:07:43 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/e5bb527d3e91b244404e142dfac8e9e55e02aa81</guid>
    </item>
    <item>
      <title>[inductor] Fix codegen bug with Native Triton kernels with  ReinterpretView args (#118569)</title>
      <link>https://github.com/pytorch/pytorch/commit/8be6dee14b76f63dea1e9329d6cd0fdc9552a2d6</link>
      <description>&lt;p&gt;[inductor] Fix codegen bug with Native Triton kernels with  ReinterpretView args (#118569)&lt;/p&gt;
&lt;p&gt;Summary:&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;It's possible for the args of a user-defined Triton Kernel to be codegen-ed twiced. But this only happens if the arg is a &lt;code&gt;ReinterpretView&lt;/code&gt;.&lt;br /&gt;
* First via &lt;code&gt;arg.codegen_reference()&lt;/code&gt; in &lt;code&gt;define_user_defined_triton_kernel()&lt;/code&gt;&lt;br /&gt;
* Second in &lt;code&gt;self.codegen_kwargs()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When using &lt;code&gt;abi_compatible=True&lt;/code&gt;, the duplicate codegen will look like the code below. The issue in the code is that one of the Tensors, internal to the graph, isn't properly freed. This scenario was eventually exposed as a memory leak when we re-ran an AOTInductor model many times and observed &lt;code&gt;memory.used&lt;/code&gt; increase after each iteration.&lt;br /&gt;
&lt;code&gt;auto tmp_tensor_handle_0 = reinterpret_tensor_wrapper(buf1, 2, int_array_0, int_array_1, 0L);
auto tmp_tensor_handle_1 = reinterpret_tensor_wrapper(buf1, 2, int_array_0, int_array_1, 0L);
...
// There's no wrap_with_raii_handle_if_needed() for tmp_tensor_handle_0.
// And there's no reference to tmp_tensor_handle_0.
// Thus, tmp_tensor_handle_0 is left as an AtenTensorHandle which isn't
// automatically cleaned-up like RAIIAtenTensorHandle
CUdeviceptr var_6;
aoti_torch_get_data_ptr(wrap_with_raii_handle_if_needed(tmp_tensor_handle_1), reinterpret_cast&amp;lt;void**&amp;gt;(&amp;amp;var_6));
void* kernel_args_var_2[] = {..., &amp;amp;var_6, ...};
launchKernel(kernels.add_kernel_0, ..., kernel_args_var_2);&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;We just need the arg's buffer name when creating the &lt;code&gt;TensorArg&lt;/code&gt; in &lt;code&gt;define_user_defined_triton_kernel()&lt;/code&gt;. Thus, just return the buffer's name and avoid any potential side-effects with &lt;code&gt;arg.codegen_reference()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Test Plan:&lt;/p&gt;
&lt;h3&gt;Inspect device memory allocated&lt;/h3&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h1&gt;Before diff&lt;/h1&gt;
&lt;p&gt;0 device memory 2048&lt;br /&gt;
1 device memory 2560&lt;br /&gt;
2 device memory 3072&lt;br /&gt;
3 device memory 3584&lt;br /&gt;
4 device memory 4096&lt;br /&gt;
5 device memory 4608&lt;/p&gt;
&lt;h1&gt;With diff (memory usage doesn't grow)&lt;/h1&gt;
&lt;p&gt;0 device memory 1536&lt;br /&gt;
1 device memory 1536&lt;br /&gt;
2 device memory 1536&lt;br /&gt;
3 device memory 1536&lt;br /&gt;
4 device memory 1536&lt;br /&gt;
5 device memory 1536&lt;br /&gt;
```&lt;/p&gt;
&lt;p&gt;Reviewed By: jingsh, tissue3&lt;/p&gt;
&lt;p&gt;Differential Revision: D53190934&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118569&lt;br /&gt;
Approved by: https://github.com/oulgen&lt;/p&gt;</description>
      <pubDate>Mon, 29 Jan 2024 21:19:32 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/8be6dee14b76f63dea1e9329d6cd0fdc9552a2d6</guid>
    </item>
    <item>
      <title>Reland PR117393 [inductor/fb] log config dict when compilation finishes (#118552)</title>
      <link>https://github.com/pytorch/pytorch/commit/5dfcf07449c9ffc7a2277c9782c88444ca11a77c</link>
      <description>&lt;p&gt;Reland PR117393 [inductor/fb] log config dict when compilation finishes (#118552)&lt;/p&gt;
&lt;p&gt;Summary: Reverted due to merge conflict&lt;/p&gt;
&lt;p&gt;Differential Revision: D53188124&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118552&lt;br /&gt;
Approved by: https://github.com/mengluy0125&lt;/p&gt;</description>
      <pubDate>Mon, 29 Jan 2024 20:34:22 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/5dfcf07449c9ffc7a2277c9782c88444ca11a77c</guid>
    </item>
    <item>
      <title>[ez][inductor] fix a typo in should_pad_bench (#118598)</title>
      <link>https://github.com/pytorch/pytorch/commit/0d47f6a44f4a72324ee096c5bbdb107b379a55c2</link>
      <description>&lt;p&gt;[ez][inductor] fix a typo in should_pad_bench (#118598)&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118598&lt;br /&gt;
Approved by: https://github.com/eellison&lt;/p&gt;</description>
      <pubDate>Mon, 29 Jan 2024 19:49:44 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/0d47f6a44f4a72324ee096c5bbdb107b379a55c2</guid>
    </item>
    <item>
      <title>[inductor] Remove ROCm xfail on test_cum{sum,prod}_zero_dim (#118558)</title>
      <link>https://github.com/pytorch/pytorch/commit/f99adbb4ec7a738684925d111f81f6b523cc83d0</link>
      <description>&lt;p&gt;[inductor] Remove ROCm xfail on test_cum{sum,prod}_zero_dim (#118558)&lt;/p&gt;
&lt;p&gt;Fixes #118540, fixes #118541&lt;/p&gt;
&lt;p&gt;Since the zero-dim case reduces to a pointwise operation, we don't fallback on&lt;br /&gt;
ROCm.&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118558&lt;br /&gt;
Approved by: https://github.com/malfet&lt;/p&gt;</description>
      <pubDate>Mon, 29 Jan 2024 12:23:40 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/f99adbb4ec7a738684925d111f81f6b523cc83d0</guid>
    </item>
    <item>
      <title>[inductor][cpp] enable vectorization with constant bool (#118380)</title>
      <link>https://github.com/pytorch/pytorch/commit/04c1df651aa58bea50977f4efcf19b09ce27cefd</link>
      <description>&lt;p&gt;[inductor][cpp] enable vectorization with constant bool (#118380)&lt;/p&gt;
&lt;p&gt;Related model DebertaForQuestionAnswering etc. For DebertaForQuestionAnswering, single thread, measured on ICX:&lt;br /&gt;
Before: 0.990x, After: 1.043x&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118380&lt;br /&gt;
Approved by: https://github.com/leslie-fang-intel, https://github.com/jansel&lt;/p&gt;</description>
      <pubDate>Mon, 29 Jan 2024 05:31:22 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/04c1df651aa58bea50977f4efcf19b09ce27cefd</guid>
    </item>
    <item>
      <title>[Inductor] Fix Argmax codegen with Nan input (#118358)</title>
      <link>https://github.com/pytorch/pytorch/commit/ee3dfbbe470822a50516310384ecce071ec79f7c</link>
      <description>&lt;p&gt;[Inductor] Fix Argmax codegen with Nan input (#118358)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;br /&gt;
Fix issue https://github.com/pytorch/pytorch/issues/118266, current &lt;code&gt;torch.argmax&lt;/code&gt; and &lt;code&gt;torch.argmin&lt;/code&gt; has different return values with eager and Inductor cpp backend when inputs has &lt;code&gt;Nan&lt;/code&gt; value. Align cpp backend results to eager by reusing the compare function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Test Plan&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;python -u -m pytest -s -v test_cpu_repro.py -k test_argmin_cpu_only
python -u -m pytest -s -v test_cpu_repro.py -k test_argmax_argmin_with_nan_value&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118358&lt;br /&gt;
Approved by: https://github.com/lezcano, https://github.com/jgong5, https://github.com/jansel&lt;/p&gt;</description>
      <pubDate>Mon, 29 Jan 2024 01:09:46 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/ee3dfbbe470822a50516310384ecce071ec79f7c</guid>
    </item>
    <item>
      <title>Add some type annotations to torch._inductor.codegen.wrapper (#118491)</title>
      <link>https://github.com/pytorch/pytorch/commit/2951bbf0f72dcbf8841dafbd6e764c07eb72edc6</link>
      <description>&lt;p&gt;Add some type annotations to torch._inductor.codegen.wrapper (#118491)&lt;/p&gt;
&lt;p&gt;Signed-off-by: Edward Z. Yang &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#101;&amp;#122;&amp;#121;&amp;#97;&amp;#110;&amp;#103;&amp;#64;&amp;#109;&amp;#101;&amp;#116;&amp;#97;&amp;#46;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#101;&amp;#122;&amp;#121;&amp;#97;&amp;#110;&amp;#103;&amp;#64;&amp;#109;&amp;#101;&amp;#116;&amp;#97;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118491&lt;br /&gt;
Approved by: https://github.com/Skylion007&lt;/p&gt;</description>
      <pubDate>Sun, 28 Jan 2024 22:17:27 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/2951bbf0f72dcbf8841dafbd6e764c07eb72edc6</guid>
    </item>
    <item>
      <title>Unify MYPYINDUCTOR and MYPY (#118432)</title>
      <link>https://github.com/pytorch/pytorch/commit/d03173e88cf43544fbeb458e1b8d7122038bef5b</link>
      <description>&lt;p&gt;Unify MYPYINDUCTOR and MYPY (#118432)&lt;/p&gt;
&lt;p&gt;The original motivation for MYPYINDUCTOR was a faster type checking configuration that only checked a subset of files. With the removal of &lt;code&gt;follow_imports = ignore&lt;/code&gt;, we are now able to use dmypy to do fast incremental typechecking, eliminating the need for this.&lt;/p&gt;
&lt;p&gt;Perhaps erroneously, when I tee'ed up this PR I elected to delete the &lt;code&gt;follow_imports = skip&lt;/code&gt; designations in the mypy-inductor.ini. This lead to a number of extra type error suppressions that I manually edited. You will need to review.&lt;/p&gt;
&lt;p&gt;Signed-off-by: Edward Z. Yang &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#101;&amp;#122;&amp;#121;&amp;#97;&amp;#110;&amp;#103;&amp;#64;&amp;#109;&amp;#101;&amp;#116;&amp;#97;&amp;#46;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#101;&amp;#122;&amp;#121;&amp;#97;&amp;#110;&amp;#103;&amp;#64;&amp;#109;&amp;#101;&amp;#116;&amp;#97;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118432&lt;br /&gt;
Approved by: https://github.com/Skylion007&lt;br /&gt;
ghstack dependencies: #118414, #118418&lt;/p&gt;</description>
      <pubDate>Sat, 27 Jan 2024 09:23:20 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/d03173e88cf43544fbeb458e1b8d7122038bef5b</guid>
    </item>
    <item>
      <title>Replace follow_imports = silent with normal (#118414)</title>
      <link>https://github.com/pytorch/pytorch/commit/9bce208dfbdb71e38f9e9ee38a07d43645ffb82a</link>
      <description>&lt;p&gt;Replace follow_imports = silent with normal (#118414)&lt;/p&gt;
&lt;p&gt;This is a lot of files changed! Don't panic! Here's how it works:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Previously, we set &lt;code&gt;follow_imports = silent&lt;/code&gt; for our mypy.ini configuration. Per https://mypy.readthedocs.io/en/stable/running_mypy.html#follow-imports, what this does is whenever we have an import to a module which is not listed as a file to be typechecked in mypy, we typecheck it as normal but suppress all errors that occurred in that file.&lt;/li&gt;
&lt;li&gt;When mypy is run inside lintrunner, the list of files is precisely the files covered by the glob in lintrunner.toml, but with files in excludes excluded.&lt;/li&gt;
&lt;li&gt;The top-level directive &lt;code&gt;# mypy: ignore-errors&lt;/code&gt; instructs mypy to typecheck the file as normal, but ignore all errors.&lt;/li&gt;
&lt;li&gt;Therefore, it should be equivalent to set &lt;code&gt;follow_imports = normal&lt;/code&gt;, if we put &lt;code&gt;# mypy: ignore-errors&lt;/code&gt; on all files that were previously excluded from the file list.&lt;/li&gt;
&lt;li&gt;Having done this, we can remove the exclude list from .lintrunner.toml, since excluding a file from typechecking is baked into the files themselves.&lt;/li&gt;
&lt;li&gt;torch/_dynamo and torch/_inductor were previously in the exclude list, because they were covered by MYPYINDUCTOR. It is not OK to mark these as &lt;code&gt;# mypy: ignore-errors&lt;/code&gt; as this will impede typechecking on the alternate configuration. So they are temporarily being checked twice, but I am suppressing the errors in these files as the configurations are not quite the same. I plan to unify the configurations so this is only a temporary state.&lt;/li&gt;
&lt;li&gt;There were some straggler type errors after these changes somehow, so I fixed them as needed. There weren't that many.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the future, to start type checking a file, just remove the ignore-errors directive from the top of the file.&lt;/p&gt;
&lt;p&gt;The codemod was done with this script authored by GPT-4:&lt;/p&gt;
&lt;p&gt;```&lt;br /&gt;
import glob&lt;/p&gt;
&lt;p&gt;exclude_patterns = [&lt;br /&gt;
    ...&lt;br /&gt;
]&lt;/p&gt;
&lt;p&gt;for pattern in exclude_patterns:&lt;br /&gt;
    for filepath in glob.glob(pattern, recursive=True):&lt;br /&gt;
        if filepath.endswith('.py'):&lt;br /&gt;
            with open(filepath, 'r+') as f:&lt;br /&gt;
                content = f.read()&lt;br /&gt;
                f.seek(0, 0)&lt;br /&gt;
                f.write('# mypy: ignore-errors\n\n' + content)&lt;br /&gt;
```&lt;/p&gt;
&lt;p&gt;Signed-off-by: Edward Z. Yang &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#101;&amp;#122;&amp;#121;&amp;#97;&amp;#110;&amp;#103;&amp;#64;&amp;#109;&amp;#101;&amp;#116;&amp;#97;&amp;#46;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#101;&amp;#122;&amp;#121;&amp;#97;&amp;#110;&amp;#103;&amp;#64;&amp;#109;&amp;#101;&amp;#116;&amp;#97;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/118414&lt;br /&gt;
Approved by: https://github.com/thiagocrepaldi, https://github.com/albanD&lt;/p&gt;</description>
      <pubDate>Fri, 26 Jan 2024 18:44:11 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/9bce208dfbdb71e38f9e9ee38a07d43645ffb82a</guid>
    </item>
    <item>
      <title>[inductor] Handle cum{sum,prod} on zero-dim tensors (#117990)</title>
      <link>https://github.com/pytorch/pytorch/commit/f129e3fe034c0052d1d45856ac10fc4b3a1e9700</link>
      <description>&lt;p&gt;[inductor] Handle cum{sum,prod} on zero-dim tensors (#117990)&lt;/p&gt;
&lt;p&gt;Pull Request resolved: https://github.com/pytorch/pytorch/pull/117990&lt;br /&gt;
Approved by: https://github.com/lezcano&lt;/p&gt;</description>
      <pubDate>Fri, 26 Jan 2024 14:21:42 GMT</pubDate>
      <guid isPermaLink="true">https://github.com/pytorch/pytorch/commit/f129e3fe034c0052d1d45856ac10fc4b3a1e9700</guid>
    </item>
  </channel>
</rss>
